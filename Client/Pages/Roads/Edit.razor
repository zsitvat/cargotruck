@page "/Roads/edit/{Id:int}"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js

<Form ButtonText="Update" roads="@road" OnValidSubmit="@EditRoadAsync" TitleText="Edit_road" checkValidSubmit="@CheckValidSubmit"/>

@code {
    [Parameter] public int Id { get; set; }
    bool isValidSubmit = true;
    RoadDto? road = new RoadDto();

    protected async override Task OnParametersSetAsync()
    {
        road = await http.GetFromJsonAsync<RoadDto>($"api/roads/getById/{Id}");
    }

    async Task EditRoadAsync()
    {
        if (isValidSubmit)
        {
            if (road != null)
            {
                road.UserId = authStateProvider.GetCurrentUserAsync().Result.Id;
            }
            var text = @localizer["Succesfull_update"];
            await http.PutAsJsonAsync("api/roads/put", road);
            await js.InvokeVoidAsync("alert", $"{text}");
            uriHelper.NavigateTo("/Roads");
        }
    }

    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory("/Roads/edit/{Id:int}");
        base.OnInitialized();
    }

    public void CheckValidSubmit(bool valid)
    {
        isValidSubmit = valid;
    }
}