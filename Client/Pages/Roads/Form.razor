

<EditForm class="form" Model="@roads" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="top-buttons-card">
        <div class="card-body">
            <div class="form-group">
                @if (PageHistoryState.CanGoBack())
                {
                    <a href="@PageHistoryState.GetGoBackPage()"><span class="oi oi-arrow-circle-left" aria-hidden="true" ></span></a>
                }
            </div>
            <p class="edit-title">@localizer[TitleText]</p>
                <div class="form-group form-submit">
                    <button @onclick="OnSaveData" type="submit" class="btn btn-success">
                        <i class="oi oi-circle-check"></i><div class="d-inline-block">@localizer[ButtonText]</div>
                    </button>
            </div>
        </div>
    </div>

    <div class="form-card mb-6" style="border-top-left-radius:unset;border-top-right-radius:unset;">
        <div class="card-body mb-3">

             <!--Error-->@if (error != "")
            {
            <p class="error-message ms-3 mb-2">
                <span class="icon iconify d-inline" style="color:darkred;" data-icon="material-symbols:error-circle-rounded-outline"></span>
                    @error
                </p>
            }

            <div class="d-inline-block forms-margin">
                <div class="form-group ">
                    <div>
                        <label>@localizer["Purpose_of_the_trip"]:</label>
                        <div>
                            <InputText class="form-control inputs" @bind-Value="@roads!.PurposeOfTheTrip" />
                            <ValidationMessage For="@(() => roads!.PurposeOfTheTrip)" />
                        </div>
                    </div>
                </div>
                <div class="form-group ">
                    <div>
                        <label>@localizer["Starting_date"]:</label>
                        <div>
                            <InputDate Type="InputDateType.DateTimeLocal" max="@DateTime.Now.ToString("yyyy-MM-ddThh:mm")"  class="form-control inputs" @bind-Value="@roads.StartingDate" />
                            <ValidationMessage For="@(() => roads.StartingDate)" />
                        </div>
                    </div>
                </div>
                <div class="form-group ">
                    <div>
                        <label>@localizer["Ending_date"]:</label>
                        <div>
                            <InputDate Type="InputDateType.DateTimeLocal" max="@DateTime.Now.ToString("yyyy-MM-ddThh:mm")" @bind-Value:format="yyyy.MM.dd. HH:mm" class="form-control inputs" @bind-Value="@roads.EndingDate" />
                            <ValidationMessage For="@(() => roads.EndingDate)" />
                        </div>
                    </div>
                </div>
                <div class="form-group ">
                    <div>
                        <label>@localizer["Starting_place"]:</label>
                        <div>
                            <InputText class="form-control inputs" @bind-Value="@roads.StartingPlace" />
                            <ValidationMessage For="@(() => roads.StartingPlace)" />
                        </div>
                    </div>
                </div>
                    <div class="form-group ">
                    <div>
                        <label>@localizer["Ending_place"]:</label>
                        <div>
                            <InputText class="form-control inputs" @bind-Value="@roads.EndingPlace" />
                            <ValidationMessage For="@(() => roads.EndingPlace)" />
                        </div>
                    </div>
                </div>
                <div class="form-group ">
                    <div>
                        <label>@localizer["Distance"] (km):</label>
                        <div>
                            <InputNumber class="form-control inputs" @bind-Value="@roads.Distance" />
                            <ValidationMessage For="@(() => roads.Distance)" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="d-inline-block forms-margin">
                <div class="form-group ">
                    <div>
                        <label>@localizer["Fuel"] (l):</label>
                        <div>
                            <InputNumber class="form-control inputs" @bind-Value="@roads.Fuel" />
                            <ValidationMessage For="@(() => roads.Fuel)" />
                        </div>
                    </div>
                </div>
                <div class="form-group custom-select">
                    <label>@localizer["Direction"]:</label>
                    <div type="text" class="form-control" placeholder="@localizer["Select_placeholder"]">@localizer[(roads?.Direction != null ? roads?.Direction?.ToLower() : "Select_placeholder")!]</div>
                        <div class="custom-select-options">
                            <div class="custom-select-option" @onclick='() => {  roads!.Direction = "TO";}'>
                                @localizer["to"]
                            </div>
                            <div class="custom-select-option" @onclick='() => { roads!.Direction = "FROM";}'>
                                @localizer["from"]
                            </div>
                        </div>
                    <ValidationMessage For="@(() => roads!.Direction)" />
                </div>
                <div class="form-group custom-select">
                    <label>@localizer["Expenses_id"]:</label>
                    <input type="text" class="form-control custom-select-input" @bind="roads!.ExpensesId" @bind:event="oninput" placeholder="@localizer["Select_placeholder"]" />
                    <div class="custom-select-options">
                        @if (expenses != null)
                        {
                            @foreach (var expense in expenses)
                            {
                                if (@expense.Id!.ToString().ToLower().Contains((roads.ExpensesId != null ? roads.ExpensesId?.ToString() : "")!))
                                {
                                    <div class="custom-select-option" @onclick="() => { roads.ExpensesId = expense?.Id;}">
                                        @localizer["Id"]: @expense.Id <br>
                                        @localizer["Type"]: @localizer[expense?.Type?.ToString()!] <br>
                                        @localizer["Type_id"]: @expense?.TypeId <br>
                                        @localizer["Date"]: @expense?.Date
                                    </div>
                                }
                            }
                        }
                    </div>
                <ValidationMessage For="@(() => roads.ExpensesId)" />
                </div>
                <div class="form-group custom-select">
                    <label>@localizer["Task_id"]:</label>
                    <input type="text" class="form-control custom-select-input" @bind="roads.TaskId" @bind:event="oninput" placeholder="@localizer["Mandatory"]" />
                    <div class="custom-select-options">
                        @if (tasks != null)
                        {
                            @foreach (var task in tasks.Where(x => x.Completed == false))
                            {
                                if (task.Id.ToString().ToLower().Contains((roads?.TaskId != null ? roads?.TaskId?.ToString() : "")!))
                                {
                                    <div class="custom-select-option" @onclick="() => { roads!.TaskId = task.Id; }">
                                        @localizer["Id"]: @task.Id <br>
                                        @localizer["Partner"]: @task.Partner <br>
                                        @localizer["Place_of_receipt"]: @task.PlaceOfReceipt <br>
                                        @localizer["Place_of_delivery"]: @task.PlaceOfDelivery <br>
                                        @localizer["Date"]: @task.Date <br>
                                        @localizer["Description"]: @task.Description?.Substring(0, task.Description.Length >= 50 ? 50 : task.Description.Length)
                                    </div>
                                }
                            }
                        }
                    </div>
                    <ValidationMessage For="@(() => roads.TaskId)" />
                </div>
                <div class="form-group custom-select">
                    <label>@localizer["Vehicle_registration_number"]:</label>
                    <input type="text" class="form-control custom-select-input" @bind="roads.VehicleRegistrationNumber" @bind:event="oninput" placeholder="@localizer["Select_placeholder"]" />
                    <div class="custom-select-options">
                        @if (trucks != null)
                        {
                            @foreach (var truck in trucks)
                            {
                                if (truck.VehicleRegistrationNumber!.ToString().ToLower().Contains((roads?.VehicleRegistrationNumber != null ? roads?.VehicleRegistrationNumber?.ToString() : "")!))
                                {
                                    <div class="custom-select-option" @onclick="() => { roads!.VehicleRegistrationNumber = truck.VehicleRegistrationNumber; }">
                                        @localizer["Vehicle_registration_number"]: @truck.VehicleRegistrationNumber <br>
                                        @localizer["Brand"]: @truck.Brand <br>
                                        @localizer["Max_weight"]: @truck.MaxWeight <br>
                                        @localizer["Status"]: @localizer[truck.Status.ToString()]
                                    </div>
                                }
                            }
                        }
                    </div>
                    <ValidationMessage For="@(() => roads.VehicleRegistrationNumber)" />
                </div>
                <div class="form-group custom-select">
                    <label>@localizer["Cargo_id"]:</label>
                    <input type="text" class="form-control custom-select-input" @bind="roads.CargoId" @bind:event="oninput" placeholder="@localizer["Select_placeholder"]" />
                    <div class="custom-select-options">
                        @if (cargoes != null)
                        {
                            @foreach (var cargo in cargoes)
                            {
                                if (cargo.Id.ToString().ToLower().Contains((roads.CargoId != null ? roads.CargoId?.ToString() : "")!))
                                {
                                    <div class="custom-select-option" @onclick="() => { roads.CargoId = cargo.Id; }">
                                        @localizer["Id"]: @cargo.Id <br>
                                        @localizer["Date"]: @cargo.Date <br>
                                        @localizer["Description"]: @cargo.Description?.ToString().Substring(0,cargo.Description.Length >= 80 ? 80 : cargo.Description.Length)
                                    </div>
                                }
                            }
                        }
                    </div>
                    <ValidationMessage For="@(() => roads.CargoId)" />
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter] public RoadDto? roads { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string TitleText { get; set; } = "";
    [Parameter] public EventCallback<bool> checkValidSubmit { get; set; } 
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    string error = "";
    List<CargoDto>? cargoes { get; set; }
    DeliveryTaskDto[]? tasks { get; set; }
    List<ExpenseDto>? expenses { get; set; }
    List<TruckDto>? trucks { get; set; }


    protected override async Task OnInitializedAsync()
    {
        cargoes = await client.GetFromJsonAsync<List<CargoDto>?>("api/cargoes/getcargoes");
        tasks = await client.GetFromJsonAsync<DeliveryTaskDto[]?>("api/tasks/gettasks");
        expenses = await client.GetFromJsonAsync<List<ExpenseDto>?>("api/expenses/getexpenses");
        trucks = await client.GetFromJsonAsync<List<TruckDto>?>("api/trucks/gettrucks");
        var roadWithIds = await client.GetFromJsonAsync<List<RoadDto>>("api/roads/getroads");
        roadWithIds = roadWithIds?.Where(x => x.ExpensesId != null || x.CargoId != null).ToList();

        if (roadWithIds != null)
        {
            foreach (var road in roadWithIds)
            {
                expenses?.RemoveAll(x => x.Id == road.ExpensesId && x.Id != roads?.ExpensesId);
                cargoes?.RemoveAll(x => x.Id == road.CargoId && x.Id != roads?.CargoId);
            }
        }
    }

    private async void OnSaveData()
    {
        error = "";
        var invalid = false;
        bool isValidSubmit = true;

        if (roads?.CargoId != null)
        {
            invalid = false;
            if (cargoes?.Count > 0)
            {
                @foreach (var cargo in cargoes)
                {
                    if (cargo.Id != roads.CargoId)
                    {
                        invalid = true;
                    }
                    else
                    {
                        invalid = false;
                        break;
                    }
                }
            }
            else
            {
                invalid = true;
            }

            if (invalid)
            {
                isValidSubmit = false;
                roads.CargoId = null;
                await checkValidSubmit.InvokeAsync(false);
                error += localizer["Id_cargo_not_valid"] + " ";
            }

        }

        if (roads?.VehicleRegistrationNumber != null)
        {
            invalid = false;
            if (trucks?.Count() > 0)
            {
                @foreach (var truck in trucks)
                {
                    if (truck.VehicleRegistrationNumber != roads.VehicleRegistrationNumber)
                    {
                        invalid = true;
                    }
                    else
                    {
                        invalid = false;
                        break;
                    }
                }
            }
            else
            {
                invalid = true;
            }

            if (invalid)
            {
                isValidSubmit = false;
                roads.VehicleRegistrationNumber = null;
                await checkValidSubmit.InvokeAsync(false);
                error += localizer["VRN_invalid"] + " ";
            }

        }

        if (roads?.ExpensesId != null)
        {
            invalid = false;
            if (expenses?.Count() > 0)
            {
                @foreach (var expense in expenses)
                {
                    if (expense.Id != roads.ExpensesId)
                    {
                        invalid = true;
                    }
                    else
                    {
                        invalid = false;
                        break;
                    }
                }
            }
            else
            {
                invalid = true;
            }

            if (invalid)
            {
                isValidSubmit = false;
                roads.ExpensesId = null;
                await checkValidSubmit.InvokeAsync(false);
                error += localizer["expense_id_invalid"] + " ";
            }

        }

        if (roads?.TaskId != null)
        {
            invalid = false;
            if (tasks?.Length > 0)
            {
                @foreach (var task in tasks)
                {
                    if (!task.Completed)
                    {
                        if (task.Id != roads?.TaskId)
                        {
                            invalid = true;
                        }
                        else
                        {
                            invalid = false;
                            break;
                        }
                    }
                }
            }
            else
            {
                invalid = true;
            }

            if (invalid)
            {
                isValidSubmit = false;
                roads.TaskId = null;
                await checkValidSubmit.InvokeAsync(false);
                error += localizer["task_id_invalid"] + " ";
            }

        }


        if (roads?.Direction != null)
        {
            invalid = false;
            if (roads.Direction != "TO" && roads.Direction != "FROM")
            {
                invalid = true;
            }
            else
            {
                invalid = false;
            }       

            if (invalid)
            {
                isValidSubmit = false;
                roads.Direction = null;
                await checkValidSubmit.InvokeAsync(false);
                error += localizer["direction_invalid"] + " ";
            }

        }

        if (!invalid && isValidSubmit && (roads?.Direction != null || roads?.TaskId != null || roads?.VehicleRegistrationNumber != null || roads?.CargoId != null))
        {
            await checkValidSubmit.InvokeAsync(true);
        }
    }
}