

<EditForm class="form" Model="@roads" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="top-buttons-card">
        <div class="card-body">
                <div class="form-group">
                    @if (PageHistoryState.CanGoBack())
                {
                    <a href="@PageHistoryState.GetGoBackPage()"><span class="oi oi-arrow-circle-left" aria-hidden="true" ></span></a>
                }
            </div>
            <p class="edit-title">@localizer[TitleText]</p>
                <div class="form-group">
                    <button type="submit" class="btn btn-success">
                        <i class="oi oi-circle-check"></i> @localizer[ButtonText]
                    </button>
            </div>
        </div>
    </div>

    <div class="form-card mb-6" style="border-top-left-radius:unset;border-top-right-radius:unset;">
        <div class="card-body mb-3">
                <div class="d-inline-block forms-margin">
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Purpose_of_the_trip"]:</label>
                            <div>
                                <InputText class="form-control inputs" @bind-Value="@roads.Purpose_of_the_trip" />
                                <ValidationMessage For="@(() => roads.Purpose_of_the_trip)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Starting_date"]:</label>
                            <div>
                                <InputDate Type="InputDateType.DateTimeLocal"  class="form-control inputs" @bind-Value="@roads.Starting_date" />
                                <ValidationMessage For="@(() => roads.Starting_date)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Ending_date"]:</label>
                            <div>
                                <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy.MM.dd. HH:mm" class="form-control inputs" @bind-Value="@roads.Ending_date" />
                                <ValidationMessage For="@(() => roads.Ending_date)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Starting_place"]:</label>
                            <div>
                                <InputText class="form-control inputs" @bind-Value="@roads.Starting_place" />
                                <ValidationMessage For="@(() => roads.Starting_place)" />
                            </div>
                        </div>
                    </div>
                      <div class="form-group ">
                        <div>
                            <label>@localizer["Ending_place"]:</label>
                            <div>
                                <InputText class="form-control inputs" @bind-Value="@roads.Ending_place" />
                                <ValidationMessage For="@(() => roads.Ending_place)" />
                            </div>
                        </div>
                    </div>
                <div class="form-group ">
                    <div>
                        <label>@localizer["Fuel"]:</label>
                        <div>
                            <InputText class="form-control inputs" @bind-Value="@roads.Fuel" />
                            <ValidationMessage For="@(() => roads.Fuel)" />
                        </div>
                    </div>
                </div>
                </div>
                <div class="d-inline-block forms-margin second-col">
                    <div class="form-group">
                        <div>
                                <label>@localizer["Direction"]:</label>
                            <div>
                            <select class="form-control inputs" @bind="@roads.Direction">
                                    <option  selected disabled>@localizer["Select_placeholder"]</option>
                                    <option value="TO">@localizer["to"]</option>
                                    <option value="FROM">@localizer["from"]</option>
                                </select>
                                <ValidationMessage For="@(() => roads.Direction)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group">
                        <div>
                            <label>@localizer["Expenses_id"]:</label>
                            <div>
                            <select class="form-control inputs" @bind="@roads.Expenses_id">
                                        <option  selected disabled>@localizer["Select_placeholder"]</option>
                                        @if (expenses!=null)
                                        {
                                        @foreach (var expense in expenses)
                                        {
                                                <option value="@expense.Id">@expense.Id - @expense.Type</option>
                                        }
                                    }
                                </select>
                                <ValidationMessage For="@(() => roads.Id_cargo)" />
                            </div>
                        </div>
                    </div>
                        <div class="form-group">
                            <div>
                                <label>@localizer["Task_id"]:</label>
                                <div>
                            <select class="form-control inputs" @bind="@roads.Task_id">
                                        <option selected disabled>@localizer["Select_placeholder"]</option>
                                        @if (tasks != null)
                                        {
                                            @foreach (var task in tasks)
                                            {
                                                if(!task.Completed){
                                                    <option value="@task.Id">@task.Id - @task.Date - @task.Description?.Substring(0, task.Description.Length >= 80 ? 80 : task.Description.Length)</option>
                                                }
                                            }
                                        }
                                    </select>
                                    <ValidationMessage For="@(() => roads.Task_id)" />
                                </div>
                            </div>
                        </div>
                <div class="form-group"> 
                    <div>
                        <label>@localizer["Vehicle_registration_number"]:</label>
                        <div>
                            <select class="form-control inputs" @bind="@roads.Vehicle_registration_number">
                                <option selected disabled>@localizer["Select_placeholder"]</option>
                                @if (trucks != null)
                                {
                                    @foreach (var truck in trucks)
                                    {
                                        <option value="@truck.Id">@truck.Brand -  @truck.Vehicle_registration_number</option>
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => roads.Task_id)" />
                        </div>
                    </div>
                </div>
                        <div class="form-group">
                            <div>
                                <label>@localizer["Id_cargo"]:</label>
                                <div>
                                    <select class="form-control inputs" @bind="@roads.Id_cargo">
                                        <option selected disabled>@localizer["Select_placeholder"]</option>
                                        @if (cargoes != null)
                                        {
                                            @foreach (var cargo in cargoes)
                                            {
                                                <option value="@cargo.Id">@cargo.Id - @cargo.Description?.ToString().Substring(0,cargo.Description.Length >= 80 ? 80 : cargo.Description.Length)</option>
                                            }
                                        }
                                    </select>
                                    <ValidationMessage For="@(() => roads.Id_cargo)" />
                                </div>
                            </div>
                        </div>
                    </div>
               </div>
            </div>

</EditForm>


@code {
    [Parameter] public Roads? roads { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string? TitleText { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    List<Cargoes>? cargoes { get; set; }
    Tasks[]? tasks { get; set; }
    List<Expenses>? expenses { get; set; }
    List<Trucks>? trucks { get; set; }


    protected override async Task OnInitializedAsync()
    {
        cargoes = await client.GetFromJsonAsync<List<Cargoes>?>("api/cargoes/getcargoes");
        tasks = await client.GetFromJsonAsync<Tasks[]?>("api/tasks/gettasks");
        expenses = await client.GetFromJsonAsync<List<Expenses>?>("api/expenses/getexpenses");
        trucks = await client.GetFromJsonAsync<List<Trucks>?>("api/trucks/gettrucks");
        var roadWithIds = await client.GetFromJsonAsync<List<Roads>>("api/roads/getroads");
        roadWithIds = roadWithIds?.Where(x => x.Expenses_id != null || x.Id_cargo != null).ToList();
        foreach (var road in roadWithIds)
        {
            expenses?.RemoveAll(x => x.Id == road.Expenses_id && x.Id != roads?.Expenses_id);
            cargoes?.RemoveAll(x => x.Id == road.Id_cargo && x.Id != roads?.Id_cargo);
        }
    }
}