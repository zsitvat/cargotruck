@page "/Tasks"

<h3>@localizer["Tasks"]</h3>
<div class="form-group buttons">
    <a class="btn btn-success me-4" href="/Tasks/create"><i class="oi oi-plus"></i> @localizer["Add"]</a>
    <a data-title="@localizer["Settings"]" class="btn btn-light" @onclick="@(() => settings=!settings)"><i class="oi oi-cog"></i></a>
    <button data-title="@localizer["pdf"]" class="btn btn-light" @onclick="@ExportToPdf"><i class="oi oi-document"></i></button>
    <button data-title="@localizer["excel"]" class="btn btn-light" @onclick="@ExportToExcel"><i class="oi oi-spreadsheet"></i></button>
    <button data-title="@localizer["txt"]" class="btn btn-light" @onclick="@(() => ExportToCSV(".txt"))"><span class="icon iconify" style="margin:0;" data-icon="material-symbols:text-snippet-outline"></span></button>
    <button data-title="@localizer["csv"]" class="btn btn-light" @onclick="@(() => ExportToCSV(".csv"))"><span class="icon iconify" style="margin:0;" data-icon="bi:filetype-csv"></span></button>
    <span class="file-upload-title" import-data-title="@localizer["File_input"]"><UploadFiles page="tasks" StateChanged="StateChanged" /></span>
    <input value="@searchString" @oninput="@Search" placeholder="@(searchString != "" ? searchString : localizer["Search"])" class="form-control inputs input_search" type="search" id="search-input" name="SearchString">
    <!--Filter icon-->
    @if (filter == "completed" || filter == "not_completed")
    {
        <button @onclick="@(()=>onChangeResetFilter())" class="filter-button">fluent-mdl2:accept-medium</button>
    }
    else
    {
        <button @onclick="@(()=>onChangeResetFilter())" class="filter-button not-pointer"><span class="icon iconify filter-icon not-pointer" data-icon="material-symbols:filter-alt"></span></button>
    }
    <!--Filter-->
    <select class="form-control filter" @oninput="@((e)=>onChangeGetFilter(e))" @bind="filter">
        <option value="" selected disabled>@localizer["Nothing"]</option>
        <option value="completed">@localizer["Completed"]</option>
        <option value="not_completed">@localizer["Not_completed"]</option>
    </select>
    <select data-title="@localizer["Currency"]" class="form-control currency" @oninput="@((e)=>onChangeGetType(e))" @bind="currency">
        <option value="HUF">HUF</option>
        <option value="EUR">EUR</option>
        <option value="USD">USD</option>
        <option value="CZK">CZK</option>
    </select>
    <div class="date-filter" data-title="@localizer["date-filter-info"]">
        <Input class="form-control" type="datetime-local" value="@dateFilter?.StartDate.GetValueOrDefault().ToString("yyyy-MM-ddTHH:mm", CultureInfo.CurrentCulture)" @oninput="@((e)=>{DateStartInput(e);})">
        <Input class="form-control" type="datetime-local" value="@dateFilter?.EndDate.GetValueOrDefault().ToString("yyyy-MM-ddTHH:mm", CultureInfo.CurrentCulture)" @oninput="@((e)=>{DateEndInput(e);})">
    </div>
</div>
<br>
<p class="error">@document_error</p>

@if (tasks == null)
{
    <text>@localizer["Loading"]</text>
}
else if (tasks.Length == 0)
{
    <text>@localizer["No_records"]</text>
}
else
{
    <div class="col-md-8 stretch-card mb-2">
        <div class="form-card mb-1 table-width">
            <div class="card-body mb-3">
                <div class="table-responsive fixed-table-body">
                    <table class="table striped">
                        <thead>
                            <tr>
                                <th> </th>
                                @if (showColumns[0])
                                {
                                    <th><button class="@(sortOrder=="Partner" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Partner"))">@localizer["Partner"]</button></th>
                                }
                                @if (showColumns[1])
                                {
                                    <th><button class="@(sortOrder=="Description" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Description"))">@localizer["Description"]</button></th>
                                }
                                @if (showColumns[2])
                                {
                                    <th><button class="@(sortOrder=="Place_of_receipt" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Place_of_receipt"))">@localizer["Place_of_receipt"]</button></th>
                                }
                                @if (showColumns[3])
                                {
                                    <th><button class="@(sortOrder=="Time_of_receipt" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Time_of_receipt"))">@localizer["Time_of_receipt"]</button></th>
                                }
                                @if (showColumns[4])
                                {
                                    <th><button class="@(sortOrder=="Place_of_delivery" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Place_of_delivery"))">@localizer["Place_of_delivery"]</button></th>
                                }
                                @if (showColumns[5])
                                {
                                    <th><button class="@(sortOrder=="Time_of_delivery" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Time_of_delivery"))">@localizer["Time_of_delivery"]</button></th>
                                }
                                @if (showColumns[6])
                                {
                                    <th><button class="@(sortOrder=="other_stops" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("other_stops"))">@localizer["other_stops"]</button></th>
                                }
                                @if (showColumns[7])
                                {
                                    <th><button class="@(sortOrder=="Id_cargo" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Id_cargo"))">@localizer["Id_cargo"]</button></th>
                                }
                                @if (showColumns[8])
                                {
                                    <th><button class="@(sortOrder=="Storage_time" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Storage_time"))">@localizer["Storage_time"]</button></th>
                                }
                                @if (showColumns[9])
                                {
                                    <th><button class="@(sortOrder=="Completed" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Completed"))">@localizer["Completed"]</button></th>
                                }
                                @if (showColumns[10])
                                {
                                    <th><button class="@(sortOrder=="Completion_time" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Completion_time"))">@localizer["Completion_time"]</button></th>
                                }
                                @if (showColumns[11])
                                {
                                    <th><button class="@(sortOrder=="Time_of_delay" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Time_of_delay"))">@localizer["Time_of_delay"]</button></th>
                                }
                                @if (showColumns[12])
                                {
                                    <th><button class="@(sortOrder=="Payment" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Payment"))">@localizer["Payment"]</button></th>
                                }
                                @if (showColumns[13])
                                {
                                    <th><button class="@(sortOrder=="Final_Payment" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Final_Payment"))">@localizer["Final_Payment"]</button></th>
                                }
                                @if (showColumns[14])
                                {
                                    <th><button class="@(sortOrder=="Penalty" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Penalty"))">@localizer["Penalty"]</button></th>
                                }
                                @if (showColumns[15])
                                {
                                    <th class="last-col"><button class="@(sortOrder=="Date" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Date"))">@localizer["Date"]</button></th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @{int rowCounter = 0 + pageSize * (currentPage-1);}
                            @foreach (Tasks item in tasks)
                            {
                                rowCounter += 1;
                                <tr class="@(item.Completed ? "green": "")">
                                    <td>@rowCounter</td>
                                    @if (showColumns[0])
                                    {
                                        <td>@item.Partner</td>
                                    }
                                    @if (showColumns[1])
                                    {
                                        <td>@item.Description</td>
                                    }
                                    @if (showColumns[2])
                                    {
                                        <td>@item.Place_of_receipt</td>
                                    }
                                    @if (showColumns[3])
                                    {
                                        <td>@(item.Time_of_receipt.HasValue ? @item.Time_of_receipt.Value.ToString("yyyy/MM/dd HH:mm") : "")</td>
                                    }
                                    @if (showColumns[4])
                                    {
                                        <td>@item.Place_of_delivery</td>
                                    }
                                    @if (showColumns[5])
                                    {
                                        <td>@(item.Time_of_delivery.HasValue ? @item.Time_of_delivery.Value.ToString("yyyy/MM/dd HH:mm") : "")</td>
                                    }
                                    @if (showColumns[6])
                                    {
                                        <td>@item.other_stops</td>
                                    }
                                    @if (showColumns[7])
                                    {
                                        <td><button class="no-button" @onclick="@(()=>GetById(item.Id_cargo))">@item.Id_cargo</button></td>
                                    }
                                    @if (showColumns[8])
                                    {
                                        <td>@item.Storage_time</td>
                                    }
                                    @if (showColumns[9])
                                    {
                                        if (item.Completed == true)
                                        {
                                            <td><button @onclick="@(()=>ChangeCompletion(item))" class="no-button">@localizer["True"]<span class="icon iconify completed-icon" data-icon="fluent-mdl2:accept-medium"></span></button></td>
                                        }
                                        else
                                        {
                                            <td><button @onclick="@(()=>ChangeCompletion(item))" class="no-button">@localizer["False"]<span class="icon iconify" style="color:red" data-icon="mdi:alpha-x"></span></button></td>
                                        }
                                    }
                                    @if (showColumns[10])
                                    {
                                        <td>@(item.Completion_time.HasValue ? @item.Completion_time.Value.ToString("MM/dd/yyyy HH:mm") :  "")</td>
                                    }
                                    @if (showColumns[11])
                                    {
                                        <td>@item.Time_of_delay</td>
                                    }
                                    @if (showColumns[12])
                                    {
                                        <td>
                                            @if (@item.Payment != null)
                                            {
                                                @if (currency != "HUF" && rates != null)
                                                {
                                                    @(GetCurrencyAsync(item.Payment).Result.Value.ToString("0.##") + " " + currency)
                                                }
                                                else if(item.Payment  != 0)
                                                {
                                                    @(item.Payment + " HUF")
                                                }
                                            }
                                        </td>
                                    }
                                    @if (showColumns[13])
                                    {
                                          <td>
                                            @if (@item.Final_Payment != null)
                                            {
                                                @if (currency != "HUF" && rates != null)
                                                {
                                                    @(GetCurrencyAsync(item.Final_Payment).Result.Value.ToString("0.##") + " " + currency)
                                                }
                                                else if (item.Final_Payment != 0)
                                                {
                                                    @(item.Final_Payment + " HUF")
                                                }
                                            }
                                        </td>
                                    }
                                    @if (showColumns[14])
                                    {
                                        <td>
                                            @if (@item.Penalty != null)
                                            {
                                                @if (currency != "HUF" && rates != null)
                                                {
                                                    @(GetCurrencyAsync(item.Penalty).Result.Value.ToString("0.##") + " " + currency)
                                                }
                                                else if (item.Penalty != 0)
                                                {
                                                    @(item.Penalty + " HUF")
                                                }
                                            }
                                        </td>
                                    }
                                    @if (showColumns[15])
                                    {
                                        <td>@item.Date</td>
                                    }
                                    <td>
                                        <a class="btn  fixed" href="Tasks/edit/@item.Id"> <span data-title="@localizer["Edit"]" class="oi oi-pencil" aria-hidden="true"></span></a>
                                        <button class="btn fixed2" @onclick="@(() => Delete(item.Id))"> <span data-title="@localizer["Delete"]" class="oi oi-trash" aria-hidden="true"></span></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="align-center pagination-style mt-2"> 
                    @if (currentPage != 1)
                    {
                        <i class="oi oi-media-skip-backward btn btn-pagination" id="prev" @onclick="PrevPage"></i>
                    }else
                    {
                         <i style="opacity:0;" class=" oi oi-media-skip-backward btn btn-pagination"></i>
                    }
                    @for (int i = currentPage - 2; i <= currentPage + 2; i++)
                    {
                        int j = i;
                        @if (i > 0 && i <= maxPage)
                        {
                            if (i == currentPage)
                            {
                                <span class="btn btn-pagination currentpage"  @onclick="() => ShowPage(j)">@i</span>
                            }
                            else
                            {
                                <span class="btn  btn-pagination"  @onclick="() => ShowPage(j)">@i</span>
                            }
                        }

                    }
                    @if(currentPage < maxPage)
                    {
                        <i class="oi oi-media-skip-forward btn btn-pagination" id="next" @onclick="NextPage"></i>
                    }
                    else
                    {
                        <i style="opacity:0;" class="oi oi-media-skip-forward btn btn-pagination"></i>
                    }
                </div>
            </div>
        </div>
    </div>

    <div class="hideandshow-cards">
        @if (settings)
        {
            <Settings OnSettingsClosed="SettingsClosed" OnInputChanged="InputChanged" OnSettingsChanged="SettingsChanged" showColumns="@showColumns" settings="@settings" pageSize="@pageSize" />
        }
        @if ( idData!= null)
        {
            <div class="getbyid-card mb-6">
                <div class="card-body">
                    <div class="ms-4">
                        <a class="btn btn-danger x" @onclick="@( ()=> idData=null )"><i class="oi oi-x"></i></a>
                        <h2 class="align-center fw-bold">@localizer["Cargo"]</h2>
                        <div class="row mt-4">
                            <div class="column">
                                <b>@localizer["Weight"]:</b>
                                <b>@localizer["Description"]:</b>
                                <b>@localizer["Delivery_requirements"]:</b>
                                <b>@localizer["Vehicle_registration_number"]:</b>
                                <b>@localizer["Warehouse_id"]:</b>
                                <b>@localizer["Warehouse_section"]:</b>
                                <b>@localizer["Storage_starting_time"]:</b>
                                <b>@localizer["Date"]:</b>
                            </div>
                            <div class="column">
                                <p>@(idData.Weight != null ? (idData.Weight + "kg"):  "-")</p>
                                <p>@(idData.Description != null ? idData.Description : "-") </p>
                                <p>@(idData.Delivery_requirements != null ? idData.Delivery_requirements : "-") </p>
                                <p>@(idData.Vehicle_registration_number != null ? idData.Vehicle_registration_number : "-")</p>
                                <p>@(idData.Warehouse_id != null ? idData.Warehouse_id : "-") </p>
                                <p>@(idData.Warehouse_section != null ? idData.Warehouse_section : "-") </p>
                                <p>@(idData.Storage_starting_time != null ? idData.Storage_starting_time : "-") </p>
                                <p>@idData.Date</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>

}
@code {
    private bool settings = false;
    Tasks[]? tasks { get; set; }
    Cargoes? idData { get; set; }
    private List<bool> showColumns = Enumerable.Repeat(true, 16).ToList();
    private int currentPage = 1;
    int pageSize = 10;
    int dataRows;
    float maxPage;
    private string sortOrder = "Date";
    private bool desc = true;
    private string? searchString = "";
    string? document_error;
    string currency = "HUF";
    Dictionary<string, dynamic>? rates;
    string? filterIcon;
    string? filter = "";
    DateFilter? dateFilter = new DateFilter();

    public class DateFilter
    {
        public DateTime? StartDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1,0,0,0);
        public DateTime? EndDate = new DateTime(DateTime.Today.Year, DateTime.Today.Month, DateTime.DaysInMonth(DateTime.Today.Year, DateTime.Today.Month),23,59,59);
    }

    async void DateStartInput(ChangeEventArgs e)
    {
        if (e != null && e.Value.ToString() != "" ) 
        {
            dateFilter.StartDate = DateTime.Parse(e.Value.ToString());
            await OnInitializedAsync();
        }
    }

    async void DateEndInput(ChangeEventArgs e)
    {
        if (e != null && e.Value.ToString() != "" ) 
        {
            dateFilter.EndDate = DateTime.Parse(e.Value.ToString());
            await OnInitializedAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        PageHistoryState.AddPageToHistory("/Tasks");
        base.OnInitialized();  
        dataRows = await client.GetFromJsonAsync<int>("api/tasks/pagecount");
        await ShowPage();   
        if (rates == null)
        {
            try
            {
                rates = await CurrencyExchange.GetRatesAsync(client);
            }
            catch (Exception ex)
            {

                document_error = $"Error - Type: {ex.GetType()}, Message: {ex.Message}";
                if (ex.GetType().ToString() == "Microsoft.CSharp.RuntimeBinder.RuntimeBinderException")
                {
                    document_error = "You have exceeded your daily monthly API rate limit. Please review and upgrade your subscription plan at promptapi.com subscriptions to continue.";
                }
                Console.WriteLine(document_error);
            }
        }
    }

    public async Task<float?> GetCurrencyAsync(int? amount)
    {
        float? conversionNum = amount;
        if (rates != null && currency != "HUF")
        {         
            if (currency != "EUR")
            {
                conversionNum = (float)((amount / rates["HUF"]) * rates[currency]);
            }
            else
            {
                conversionNum = (float)(amount / rates["HUF"]);
            }
        }
        return conversionNum;
    }

    async void onChangeGetType(ChangeEventArgs e)
    {
        currency = e.Value.ToString();
    }

    async void onChangeGetFilter(ChangeEventArgs e)
    {
        filter = e.Value.ToString();
        await OnInitializedAsync();
    }

    async void onChangeResetFilter()
    {
        filter = "";
        await OnInitializedAsync();
    }

    async Task ChangeCompletion(Tasks task)
    {
        await client.PutAsJsonAsync($"api/tasks/changecompletion", task);
        await ShowPage();
    }

    async Task Delete(int Id)
    {
        var t = tasks.First(x => x.Id == Id);
        if (await js.InvokeAsync<bool>("confirm", $"{@localizer["Delete?"]} {t.Partner} ({t.Id})"))
        {
            await client.DeleteAsync($"api/tasks/delete/{Id}");
            var shouldreload = dataRows % ((currentPage == 1 ? currentPage : currentPage - 1) * pageSize);
            if (shouldreload == 1 && dataRows > 0) { navigationManager.NavigateTo("/Tasks", true); }
            await OnInitializedAsync();
        }
    }

    async Task GetById(int? id)
    {
        if (id != null)
        {
            idData = await client.GetFromJsonAsync<Cargoes?>($"api/cargoes/getbyid/{id}");
        }

    }

    public void SettingsClosed()
    {
        settings = !settings;
    }


    public void SettingsChanged(){}

    public async void InputChanged(int ChangedPageSize )
    {
        pageSize = ChangedPageSize;
        currentPage = 1;
        await ShowPage();
    }

    protected async Task NextPage()
    {
        currentPage++;
        await ShowPage();
    }

    protected async Task ShowPage(int i)
    {
        currentPage = i;
        await ShowPage();
    }

    protected async Task PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await ShowPage();
        }
    }

    protected async void Sorting(string column)
    {
        if (sortOrder == column)
        {
            desc = !desc;
        }
        else
        {
            sortOrder = column;
        }
        await ShowPage();
    }

    protected async Task Search(ChangeEventArgs args)
    {
        searchString = args.Value.ToString();
        await ShowPage();
    }


    protected async Task ShowPage()
    {
        if (pageSize < 1 || pageSize == null ){ pageSize = 10; }
        else if (pageSize >= dataRows) { pageSize = dataRows != 0 ? dataRows : 1 ; }
        maxPage = (int)Math.Ceiling((decimal)((float)dataRows / (float)pageSize));

        tasks = await client.GetFromJsonAsync<Tasks[]>($"api/tasks/get?page={currentPage}&pageSize={pageSize}&sortOrder={sortOrder}&desc={desc}&searchString={searchString}&filter={filter}&dateFilterStartDate={dateFilter?.StartDate}&dateFilterEndDate={dateFilter?.EndDate}");
        StateHasChanged();
    }

    private async Task ExportToPdf ()
    {
        //get base64 string from web api call
        var Response = await client.GetAsync($"api/tasks/pdf?lang={CultureInfo.CurrentCulture.Name.ToString()}");

        if (Response.IsSuccessStatusCode)
        {
            var base64String = await Response.Content.ReadAsStringAsync();

            Random rnd = new Random();
            int random = rnd.Next(1000000, 9999999);
            string filename = "Tasks" + random + "_" + DateTime.Now.ToString("dd-MM-yyyy") + ".pdf";

            //call javascript function to download the file
            await  js.InvokeVoidAsync(
                "downloadFile",
                "application/pdf",
                base64String,
                filename);
        }
        else
        {
            document_error = localizer["Document_failder_to_create"];
        }
    }

    private async Task ExportToExcel()
    {
        //get base64 string from web api call
        var Response = await client.GetAsync($"api/tasks/excel?lang={CultureInfo.CurrentCulture.Name.ToString()}");

        if (Response.IsSuccessStatusCode)
        {
            var base64String = await Response.Content.ReadAsStringAsync();

            Random rnd = new Random();
            int random = rnd.Next(1000000, 9999999);
            string filename = "Tasks" + random + "_" + DateTime.Now.ToString("dd-MM-yyyy") + ".xlsx";

            //call javascript function to download the file
            await js.InvokeVoidAsync(
                "downloadFile",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                base64String,
                filename);
        }
        else
        {
            document_error = localizer["Document_failder_to_create"];
        }
    }

    private async Task ExportToCSV(string format)
    {
        //get base64 string from web api call
        var Response = await client.GetAsync($"api/tasks/csv?lang={CultureInfo.CurrentCulture.Name.ToString()}");

        if (Response.IsSuccessStatusCode)
        {
            var base64String = await Response.Content.ReadAsStringAsync();

            Random rnd = new Random();
            int random = rnd.Next(1000000, 9999999);
            string filename = "Tasks" + random + "_" + DateTime.Now.ToString("dd-MM-yyyy") + format;

            //call javascript function to download the file
            await js.InvokeVoidAsync(
                "downloadFile",
                "application/" + format,
                base64String,
                filename);
        }
        else
        {
            document_error = localizer["Document_failder_to_create"];
        }
    }

    private async void StateChanged()
    {
        await OnInitializedAsync();
    }

}