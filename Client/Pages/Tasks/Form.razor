

<EditForm class="form" Model="@tasks" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="top-buttons-card">
        <div class="card-body">
                <div class="form-group">
                    @if (PageHistoryState.CanGoBack())
                {
                    <a href="@PageHistoryState.GetGoBackPage()"><span class="oi oi-arrow-circle-left" aria-hidden="true"></span></a>
                }
            </div>
            <p class="edit-title">@localizer[TitleText!]</p>
                <div class="form-group form-submit">
                    <button @onclick="OnSaveData" type="submit" class="btn btn-success">
                        <i class="oi oi-circle-check"></i><div class="d-inline-block">@localizer[ButtonText]</div>
                    </button>
            </div>
        </div>
    </div>

    <div class="form-card mb-6" style="border-top-left-radius:unset;border-top-right-radius:unset;">
        <div class="card-body mb-3">

             <!--Error-->@if (error != "")
            {
            <p class="error-message ms-3 mb-2">
                <span class="icon iconify d-inline" style="color:darkred;" data-icon="material-symbols:error-circle-rounded-outline"></span>
                    @error
                </p>
            }

            <div class="d-inline-block forms-margin ">       
                <div class="form-group">
                    <label>@localizer["Partner"]:</label>
                    <div>
                        <InputText class="form-control inputs" @bind-Value="@tasks!.Partner" />
                        <ValidationMessage For="@(() => tasks.Partner)" />
                    </div>
                </div>
                <div class="form-group ">
                    <div>
                        <label>@localizer["Description"]:</label>
                        <div>
                            <InputText class="form-control inputs" @bind-Value="@tasks.Description" />
                            <ValidationMessage For="@(() => tasks.Description)" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div>
                        <label>@localizer["Place_of_receipt"]:</label>
                        <div>
                            <InputText class="form-control inputs" @bind-Value="@tasks.Place_of_receipt" />
                            <ValidationMessage For="@(() => tasks.Place_of_receipt)" />
                        </div>
                    </div>
                </div>
                <div class="form-group ">
                    <div>
                        <label>@localizer["Time_of_receipt"]:</label>
                        <div>
                            <InputDate Type="InputDateType.DateTimeLocal"  @bind-Value:format="yyyy.MM.dd. HH:mm" class="form-control inputs" @bind-Value="@tasks.Time_of_receipt" />
                            <ValidationMessage For="@(() => tasks.Time_of_receipt)" />
                        </div>
                    </div>
                </div>
                <div class="form-group ">
                    <div>
                        <label>@localizer["Place_of_delivery"]:</label>
                        <div>
                            <InputText class="form-control inputs"  @bind-Value="@tasks.Place_of_delivery" />
                            <ValidationMessage For="@(() => tasks.Place_of_delivery)" />
                        </div>
                    </div>
                </div>
                <div class="form-group ">
                    <div>
                        <label>@localizer["Time_of_delivery"]:</label>
                        <div>
                            <InputDate Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy.MM.dd. hh:mm" class="form-control inputs" @bind-Value="@tasks.Time_of_delivery" />
                            <ValidationMessage For="@(() => tasks.Time_of_delivery)" />
                        </div>
                    </div>
                </div>
            </div>
    
            <div class="d-inline-block forms-margin">
                <div class="form-group ">
                    <div>
                        <label>@localizer["Other_stops"]:</label>
                        <div>
                            <InputText class="form-control inputs" @bind-Value="@tasks.Other_stops" />
                            <ValidationMessage For="@(() => tasks.Other_stops)" />
                        </div>
                    </div>
                </div>

                <div class="form-group custom-select">
                    <label>@localizer["Id_cargo"]:</label>
                    <input type="text" class="form-control custom-select-input" @bind="tasks.Id_cargo" @bind:event="oninput" placeholder="@localizer["Select_placeholder"]" />
                    <div class="custom-select-options">
                        @if (cargoes != null)
                        {
                            @foreach (var cargo in cargoes)
                            {
                                if (cargo.Id.ToString().ToLower().Contains((tasks.Id_cargo != null ? tasks.Id_cargo?.ToString() : "")!))
                                {
                                    <div class="custom-select-option" @onclick="() => { tasks.Id_cargo = cargo.Id; }">
                                        @localizer["Id"]: @cargo.Id <br>
                                        @localizer["Description"]: @cargo.Description?.Substring(0, cargo.Description.Length >= 80 ? 80 : cargo.Description.Length)
                                    </div>
                                }
                            }
                        }
                    </div>
                    <ValidationMessage For="@(() =>tasks.Id_cargo)" />
                </div>
                  <div class="form-group">
                    <div>
                        <label>@localizer["Storage_time"]:</label>
                        <div>
                            <InputText class="form-control inputs" @bind-Value="@tasks.Storage_time" />
                            <ValidationMessage For="@(() => tasks.Storage_time)" />
                        </div>
                    </div>
                </div>
                  <div class="form-group">
                    <div>
                        <label>@localizer["Time_of_delay"]:</label>
                        <div>
                            <InputText class="form-control inputs" @bind-Value="@tasks.Time_of_delay" />
                            <ValidationMessage For="@(() => tasks.Time_of_delay)" />
                        </div>
                    </div>
                </div>
                  <div class="form-group">
                    <div>
                        <label>@localizer["Payment"]:</label>
                        <div>
                            <InputNumber min="0"  class="form-control inputs" @bind-Value="@tasks.Payment" />
                            <ValidationMessage For="@(() => tasks.Payment)" />
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div>
                        <label>@localizer["Penalty"]:</label>
                        <div>
                            <InputNumber min="0"   class="form-control inputs" @bind-Value="@tasks.Penalty" />
                            <ValidationMessage For="@(() => tasks.Penalty)" />
                        </div>
                    </div>
                </div>      
            </div>

            <div class="form-group completed">
                <div>
                    <label>@localizer["Completed"]:</label>
                    <InputCheckbox class="form-check-input" @bind-Value="@tasks.Completed" />
                    <ValidationMessage For="@(() => tasks.Completed)" />
                </div>
            </div>
    </div>
</div>

</EditForm>


@code {
    [Parameter] public Tasks? tasks { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string TitleText { get; set; } = "";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback<bool> checkValidSubmit { get; set; }
    string error = "";
    List<Cargoes>? cargoes { get; set; }
    List<Tasks>? taskWithCargo { get; set; }

    protected override async Task OnInitializedAsync()
    {
        cargoes = await client.GetFromJsonAsync < List<Cargoes>>("api/cargoes/getcargoes");
        taskWithCargo = await client.GetFromJsonAsync<List<Tasks>>("api/tasks/gettasks");
        taskWithCargo = taskWithCargo?.Where(x => x.Id_cargo != null).ToList();
        if (taskWithCargo != null) {
            foreach (var task in taskWithCargo)
            {
                cargoes?.RemoveAll(x => x.Id == task.Id_cargo && x.Id != tasks?.Id_cargo);
            }
        }
    }

    private async void OnSaveData()
    {
        error = "";
        var invalid = false;

        if (tasks?.Id_cargo != null)
        {
            if(cargoes?.Count > 0)
            {
                @foreach (var cargo in cargoes)
                {
                    if (cargo.Id != tasks.Id_cargo)
                    {
                        invalid = true;
                    }
                    else
                    {
                        invalid = false;
                        break;
                    }
                }
            }
            else
            {
                invalid = true;
            }

            if (invalid)
            {
                tasks.Id_cargo = null;
                await checkValidSubmit.InvokeAsync(false);
                error += localizer["Id_cargo_not_valid"] + " ";
            }
           
        }
        if (!invalid)
        {
            await checkValidSubmit.InvokeAsync(true);
        }
    }
}