@page "/"
@using Cargotruck.Shared.Resources
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<Resource> localizer
@inject PageHistoryState PageHistoryState
@using Cargotruck.Shared.Models

<div>
    <div class="row">
        <div class="col-sm-6 col-lg-3">
            <div class="box list-item">
                <span class="avatar w-40 text-center rounded symbol me-3">
                    <span class="icon iconify" data-icon="clarity:tasks-solid"></span>
                </span>
                <div class="list-body">
                    <h2 class="m-0 text-md">
                        @counts["numberOfTasks"] <span class="text-sm">@localizer["task"].ToString().ToLower()</span>
                    </h2>
                    <small class="text-muted">@counts["numberOfTasksUnFinished"] @localizer["Tasks_unfinished"].</small>
                </div>
            </div>               
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="box list-item">
                <span class="avatar wnumberOfTasks-40 text-center rounded symbol me-3">
                    <span class="icon iconify" data-icon="cil:truck"></span>
                </span>
                <div class="list-body">
                    <h2 class="m-0 text-md">
                        @counts["numberOfTrucks"] <span class="text-sm">@localizer["truck"].ToString().ToLower()</span>
                    </h2>
                    <small class="text-muted">@counts["numberOfTrucksUnFinished"] @localizer["Trucks_unfinished"].</small>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="box list-item">
                <span class="avatar w-40 text-center rounded symbol me-3">
                    <span class="icon iconify" data-icon="carbon:delivery-parcel"></span>
                </span>
                <div class="list-body">
                    <h2 class="m-0 text-md">
                        @counts["numberOfCargoes"] <span class="text-sm">@localizer["cargo"].ToString().ToLower()</span>
                    </h2>
                    <small class="text-muted">@counts["numberOfCargoesUnFinished"] @localizer["Cargoes_unfinished"].</small>
                </div>
            </div>
        </div>
        <div class="col-sm-6 col-lg-3">
            <div class="box list-item">
                <span class="avatar w-40 text-center rounded symbol me-3">
                    <span class="icon iconify" data-icon="mdi:account-lock-open"></span>
                </span>
                <div class="list-body">
                    <h2 class="m-0 text-md">
                        @counts["numberOfLogins"] <span class="text-sm">@localizer["logins"].ToString().ToLower()</span>
                    </h2>
                    <small class="text-muted">@counts["numberOfUsers"] @localizer["From_user"].</small>
                </div>
            </div>
        </div>
    </div>

    <!--Charts-->
    <div class="charts"><ChartComponent /></div>

<AuthorizeView>
    <Authorized>

        @if (greetings)
        {
            <div class="col-md-3 stretch-card successful-login">
                <div class="card card2 ps-2">
                    <div class="card-body">
                        <h1>
                            <span class="icon iconify" style="margin:0;color:forestgreen;" data-icon="mdi:lock-open-check"></span>
                            @localizer["Hello"] @context.User.Identity?.Name!
                        </h1>
                    </div>
                </div>
            </div>
        }

    </Authorized>
    <Authorizing>
        <img src="~/css/img/loading.gif" alt="loading" width="500" height="600">
    </Authorizing>
</AuthorizeView>
</div>


@code{
    [CascadingParameter]
    Task<AuthenticationState>? AuthenticationState { get; set; }
    bool greetings = true;
    Dictionary<string, int?> counts = new Dictionary<string, int?>(){
    {"numberOfTasksUnFinished",null},
    {"numberOfTrucksUnFinished",null},
    {"numberOfCargoesUnFinished",null},
    {"numberOfLogins",null},
    {"numberOfTasks",null},
    {"numberOfTrucks",null},
    {"numberOfCargoes",null},
    {"numberOfUsers",null}
    };

    protected override async Task OnInitializedAsync()
    {
        if ((await AuthenticationState!).User.Identity!.IsAuthenticated)
        {
            if (!PageHistoryState.GetPageIsVisited("/"))
            {
                PageHistoryState.AddPageToHistory("/");
            }
            else
            {
                greetings = false;
            }
            await GetNumbers();
        }
        else
        {
            PageHistoryState.ResetPageToHistory();
        }
    }

    protected async Task GetNumbers()
    {
        Dictionary<string, int?> numbersDic = new Dictionary<string, int?>(){
        {"numberOfTasksUnFinished",0},
        {"numberOfTrucksUnFinished",0},
        {"numberOfCargoesUnFinished",0},
        {"numberOfLogins",0},
        {"numberOfTasks",0},
        {"numberOfTrucks",0},
        {"numberOfCargoes",0},
        {"numberOfUsers",0}
        };

        numbersDic["numberOfTasks"] = await client.GetFromJsonAsync<int>($"api/tasks/count?all={true}");
        numbersDic["numberOfTrucks"] = await client.GetFromJsonAsync<int>($"api/trucks/count?all={true}");
        numbersDic["numberOfCargoes"] = await client.GetFromJsonAsync<int>($"api/cargoes/count?all={true}");

        numbersDic["numberOfTasksUnFinished"] = await client.GetFromJsonAsync<int>($"api/tasks/count?all={false}");
        numbersDic["numberOfTrucksUnFinished"] = await client.GetFromJsonAsync<int>($"api/trucks/count?all={false}");
        numbersDic["numberOfCargoesUnFinished"] = await client.GetFromJsonAsync<int>($"api/cargoes/count?all={false}");

        numbersDic["numberOfLogins"] = await client.GetFromJsonAsync<int>("api/admin/loginscount");
        numbersDic["numberOfUsers"] = await client.GetFromJsonAsync<int>("api/admin/count");

        await GetNumbersCounter(numbersDic);
    }

    protected async Task GetNumbersCounter(Dictionary<string, int?> MaxNumbers)
    {
        int max = 0;
        foreach(var num in MaxNumbers)
        {
            if (max < num.Value)
            {
                max = (int)num.Value;
            }
        }
        for (int i = 0; i < max; i++)
        {
            if (i <= MaxNumbers["numberOfTasks"])
            {
                counts["numberOfTasks"] = i;
            }
            if (i <= MaxNumbers["numberOfTrucks"])
            {
                counts["numberOfTrucks"] = i;
            }
            if (i <= MaxNumbers["numberOfCargoes"])
            {
                counts["numberOfCargoes"] = i;
            }
            if (i <= MaxNumbers["numberOfTasksUnFinished"])
            {
                counts["numberOfTasksUnFinished"] = i;
            }
            if (i <= MaxNumbers["numberOfTrucksUnFinished"])
            {
                counts["numberOfTrucksUnFinished"] = i;
            }
            if (i <= MaxNumbers["numberOfCargoesUnFinished"])
            {
                counts["numberOfCargoesUnFinished"] = i;
            }
            if (i <= MaxNumbers["numberOfLogins"])
            {
                counts["numberOfLogins"] = i;
            }
            if (i <= MaxNumbers["numberOfUsers"])
            {
                counts["numberOfUsers"] = i;
            }
            await Task.Delay(25);
            StateHasChanged();
        }
    }
}

