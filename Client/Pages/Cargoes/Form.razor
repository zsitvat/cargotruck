
<EditForm class="form" Model="@cargoes" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="top-buttons-card">
        <div class="card-body">
                <div class="form-group">
                    @if (PageHistoryState.CanGoBack())
                {
                    <a href="@PageHistoryState.GetGoBackPage()"><span class="oi oi-arrow-circle-left" aria-hidden="true" ></span></a>
                }
            </div>
            <p class="edit-title">@localizer[TitleText]</p>
                <div class="form-group form-submit">
                    <button @onclick="OnSaveData" type="submit" class="btn btn-success">
                        <i class="oi oi-circle-check"></i><div class="d-inline-block">@localizer[ButtonText]</div>
                    </button>
            </div>
        </div>
    </div>

    <div class="form-card mb-6" style="border-top-left-radius:unset;border-top-right-radius:unset;">
        <div class="card-body mb-3">

            <!--Error-->@if (error != "")
            {
            <p class="error-message ms-3 mb-2">
                <span class="icon iconify d-inline" style="color:darkred;" data-icon="material-symbols:error-circle-rounded-outline"></span>
                    @error
                </p>
            }
           
                <div class="d-inline-block forms-margin ">
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Weight"]:</label>
                            <div>
                                <InputText class="form-control inputs" @bind-Value="@cargoes!.Weight" />
                                <ValidationMessage For="@(() => cargoes.Weight)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Description"]:</label>
                            <div>
                                <InputText Type="InputDateType.DateTimeLocal" class="form-control inputs" @bind-Value="@cargoes.Description" />
                                <ValidationMessage For="@(() => cargoes.Description)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group ">
                        <div>
                        <label>@localizer["Delivery_requirements"]:</label>
                            <div>
                                <InputText Type="InputDateType.DateTimeLocal" @bind-Value:format="yyyy.MM.dd. HH:mm" class="form-control inputs" @bind-Value="@cargoes.Delivery_requirements" />
                                <ValidationMessage For="@(() => cargoes.Delivery_requirements)" />
                            </div>
                        </div>
                    </div>
                <div class="form-group custom-select">
                    <label>@localizer["Vehicle_registration_number"]:</label>
                    <input type="text" class="form-control custom-select-input" @bind="cargoes.Vehicle_registration_number" @bind:event="oninput" placeholder="@localizer["Select_placeholder"]" />
                    <div class="custom-select-options">
                        @if (trucks != null)
                        {
                            @foreach (var truck in trucks)
                            {
                                if (truck.Vehicle_registration_number!.ToString().ToLower().Contains(cargoes?.Vehicle_registration_number != null ? cargoes?.Vehicle_registration_number?.ToString() : ""))
                                {
                                    <div class="custom-select-option" @onclick="() => { cargoes!.Vehicle_registration_number = truck.Vehicle_registration_number; }">
                                        @truck.Id - @truck.Vehicle_registration_number
                                    </div>
                                }
                            }
                        }
                    </div>
                    <ValidationMessage For="@(() => cargoes.Vehicle_registration_number)" />
                </div>        
            </div>
                <div class="d-inline-block forms-margin" >
                    <div class="form-group custom-select">
                        <label>@localizer["Task_id"]:</label>
                        <input type="text" class="form-control custom-select-input" @bind="cargoes.Task_id" @bind:event="oninput" placeholder="@localizer["Mandatory"]" />
                        <div class="custom-select-options">
                            @if (tasks != null)
                            {
                                @foreach (var task in tasks.Where(x=>x.Completed==false))
                                {
                                    if (task.Id.ToString().ToLower().Contains(cargoes?.Task_id != null ? cargoes?.Task_id?.ToString() : ""))
                                    {
                                        <div class="custom-select-option" @onclick="() => { cargoes!.Task_id = task.Id; }">
                                            @task.Id - @task.Date - @task.Description?.Substring(0, task.Description.Length >= 50 ? 50 : task.Description.Length)
                                        </div>
                                    }
                                }
                            }
                        </div>
                        <ValidationMessage For="@(() => cargoes.Task_id)" />
                    </div>
                    <div class="form-group custom-select">
                        <label>@localizer["Warehouse_id"]:</label>
                        <input type="text" class="form-control custom-select-input" @bind="cargoes.Warehouse_id" @bind:event="oninput" placeholder="@localizer["Select_placeholder"]" />
                        <div class="custom-select-options">
                            @if (warehouses != null)
                            {
                                @foreach (var warehouse in warehouses)
                                {
                                if (warehouse.Id.ToString().ToLower().Contains(cargoes?.Warehouse_id != null ? cargoes?.Warehouse_id?.ToString(): ""))
                                    {
                                        <div class="custom-select-option" @onclick="() => { cargoes!.Warehouse_id = warehouse.Id; }">
                                            @warehouse.Id - @warehouse.Owner
                                        </div>
                                    }
                                }
                            }
                        </div>
                        <ValidationMessage For="@(() => cargoes.Warehouse_id)" />
                    </div>
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Warehouse_section"]:</label>
                            <div>
                                <InputText class="form-control inputs" @bind-Value="@cargoes.Warehouse_section" />
                                <ValidationMessage For="@(() => cargoes.Warehouse_section)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Storage_starting_time"]:</label>
                            <div>
                                <InputDate Type="InputDateType.DateTimeLocal" class="form-control inputs" @bind-Value="@cargoes.Storage_starting_time" />
                                <ValidationMessage For="@(() => cargoes.Storage_starting_time)" />
                            </div>
                        </div>
                    </div>
            </div>
        </div>
    </div>

</EditForm>


@code {
    [Parameter] public Cargoes? cargoes { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string TitleText { get; set; } = "";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback<bool> checkValidSubmit { get; set; }
    string error = "";
    Warehouses[]? warehouses { get; set; }
    List<Tasks>? tasks { get; set; }
    List<Trucks>? trucks { get; set; }
    List<Cargoes>? cargoWithIds { get; set; }


    protected override async Task OnInitializedAsync()
    {
        warehouses = await client.GetFromJsonAsync<Warehouses[]?>("api/warehouses/getwarehouses");
        tasks = await client.GetFromJsonAsync < List<Tasks>?>("api/tasks/gettasks");
        trucks = await client.GetFromJsonAsync < List<Trucks>?>("api/trucks/gettrucks");
        cargoWithIds = await client.GetFromJsonAsync<List<Cargoes>>("api/cargoes/getcargoes");

        foreach (var cargo in cargoWithIds!)
        {
            trucks?.RemoveAll(x => x.Vehicle_registration_number == cargo.Vehicle_registration_number && x.Vehicle_registration_number != cargoes?.Vehicle_registration_number);
            tasks?.RemoveAll(x => x.Id == cargo.Task_id && x.Id != cargoes?.Task_id);
        }
    }

    private async void OnSaveData()
    {
        error = "";
        var invalid = false;
        bool isValidSubmit = true;

        if (cargoes != null)
        {
            if (cargoes?.Task_id != null)
            {
                invalid = false;
                if (tasks?.Count > 0)
                {
                    @foreach (var task in tasks)
                    {
                        if (!task.Completed)
                        {
                            if (task.Id != cargoes?.Task_id)
                            {
                                invalid = true;
                            }
                            else
                            {
                                invalid = false;
                                break;
                            }
                        }
                    }

                }
                else
                {
                    invalid = true;
                }

                if (invalid)
                {
                    isValidSubmit = false;
                    cargoes.Task_id = null;
                    await checkValidSubmit.InvokeAsync(false);
                    error += CultureInfo.CurrentCulture.Name == "hu" ? "A megbízás azonosító értéke nem érvényes. " : "The task id's value is not valid. ";
                }

            }

            if (cargoes?.Warehouse_id != null)
            {
                invalid = false;
                if (warehouses?.Count() > 0)
                {
                    @foreach (var warehouse in warehouses)
                    {
                        if (warehouse.Id != cargoes?.Warehouse_id)
                        {
                            invalid = true;
                        }
                        else
                        {
                            invalid = false;
                            break;
                        }
                    }

                }
                else
                {
                    invalid = true;
                }
                if (invalid)
                {
                    isValidSubmit = false;
                    cargoes.Warehouse_id = null;
                    await checkValidSubmit.InvokeAsync(false);
                    error += CultureInfo.CurrentCulture.Name == "hu" ? "A raktár azonosító értéke nem érvényes. " : "The warehouse id's value is not valid. ";
                }

            }

            if (cargoes?.Vehicle_registration_number != null)
            {
                invalid = false;
                if (trucks?.Count > 0)
                {
                    @foreach (var truck in trucks)
                    {
                        if (truck.Vehicle_registration_number != cargoes?.Vehicle_registration_number)
                        {
                            invalid = true;
                        }
                        else
                        {
                            invalid = false;
                            break;
                        }
                    }

                }
                else
                {
                    invalid = true;
                }

                if (invalid)
                {
                    isValidSubmit = false;
                    cargoes!.Vehicle_registration_number = null;
                    await checkValidSubmit.InvokeAsync(false);
                    error += CultureInfo.CurrentCulture.Name == "hu" ? "A rendszám azonosító értéke nem érvényes. " : "The Vehicle registration number's value is not valid. ";
                }

            }
        }
        if (!invalid && isValidSubmit && (cargoes?.Warehouse_id != null || cargoes?.Task_id != null || cargoes?.Vehicle_registration_number != null))
        {
            await checkValidSubmit.InvokeAsync(true);
        }
    }
}