@page "/MonthlyExpenses/edit/{Id:int}"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js


<Form ButtonText="Update" OnHandleChangeTask="@HandleChangeTask" OnHandleChangeExpense="@HandleChangeExpense" Monthly_expenses="@monthly_expense" OnValidSubmit="@EditMonthlyExpenseAsync" TitleText="Edit_monthly_expense" />

@if (window)
{
    <SavedWindow OnClose="CloseWindow" />
}

@code {
    [Parameter] public int Id { get; set; }
    List<int>? selectedTaskId;
    List<int>? selectedExpenseId;
    MonthlyExpenseDto? monthly_expense = new MonthlyExpenseDto();
    MonthlyExpense_task_expenseDto? Monthly_expenses_tasks_expenses = new MonthlyExpense_task_expenseDto();
    bool window = false;

    public void HandleChangeTask(List<int>? selected)
    {
        selectedTaskId = selected;
    }

    public void HandleChangeExpense(List<int>? selected)
    {
        selectedExpenseId = selected;
    }

    protected async override Task OnParametersSetAsync()
    {
        monthly_expense = await http.GetFromJsonAsync<MonthlyExpenseDto>($"api/monthlyexpenses/getById/{Id}");
    }

    async Task EditMonthlyExpenseAsync()
    {
        if (monthly_expense != null)
        {
            monthly_expense.UserId = authStateProvider.GetCurrentUserAsync().Result.Id;
        }
        var IsFirstId = true;
        var IsSaved = await http.PutAsJsonAsync("api/monthlyexpenses/put", monthly_expense);

        int lenght = 0;
        if (selectedTaskId != null && selectedExpenseId != null)
        {
            lenght = (selectedTaskId.Count > selectedExpenseId?.Count) ? selectedTaskId.Count : selectedExpenseId!.Count;
        }
        else if (selectedTaskId == null && selectedExpenseId != null)
        {
            lenght = selectedExpenseId.Count;
        }
        else if (selectedTaskId != null && selectedExpenseId == null)
        {
            lenght = selectedTaskId.Count;
        }
        else
        {
            lenght = 0;
        }

        Monthly_expenses_tasks_expenses!.MonthlyExpenseId = Id;

        for (int i = 0; i < lenght; ++i)
        {
            Monthly_expenses_tasks_expenses.TaskId = null;
            Monthly_expenses_tasks_expenses.ExpenseId = null;
            if (i > 0) { IsFirstId = false; }
            if (selectedTaskId != null && selectedTaskId.Count > i)
            {
                Monthly_expenses_tasks_expenses.TaskId = selectedTaskId[i];
            }
            if (selectedExpenseId != null && selectedExpenseId.Count > i)
            {
                Monthly_expenses_tasks_expenses.ExpenseId = selectedExpenseId[i];
            }
            //MonthlyExpense_task_expense.MonthlyExpense = monthly_expense;
            await http.PostAsJsonAsync($"api/monthlyexpenses/postconnectionids?first={IsFirstId}", Monthly_expenses_tasks_expenses);
        }

        if (IsSaved.IsSuccessStatusCode)
        {
            window = true;
        }
    }

    public void CloseWindow()
    {
        window = false;
        uriHelper.NavigateTo("/MonthlyExpenses");
    }

    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory("/MonthlyExpenses/edit/{Id:int}");
        base.OnInitialized();
    }
}