@page "/Warehouses"

<h3>@localizer["Warehouses"]</h3>
<div class="form-group buttons">
    <a class="btn btn-success me-4" href="/Warehouses/create"><i class="oi oi-plus"></i> @localizer["Add"]</a>
    <a data-title="@localizer["Settings"]" class="btn btn-light" @onclick="@(() => settings=!settings)"><i class="oi oi-cog"></i></a>
    <button data-title="@localizer["pdf"]" class="btn btn-light" @onclick="@ExportToPdf"><i class="oi oi-document"></i></button>
    <button data-title="@localizer["excel"]" class="btn btn-light" @onclick="@ExportToExcel"><i class="oi oi-spreadsheet"></i></button>
    <button data-title="@localizer["txt"]" class="btn btn-light" @onclick="@(() => ExportToCSV("txt"))"><span class="icon iconify" style="margin:0;" data-icon="material-symbols:text-snippet-outline"></span></button>
    <button data-title="@localizer["csv"]" class="btn btn-light" @onclick="@(() => ExportToCSV("csv"))"><span class="icon iconify" style="margin:0;" data-icon="bi:filetype-csv"></span></button>
    <span class="file-upload-title" import-data-title="@localizer["File_input"]"><UploadFiles page="warehouses" StateChanged="StateChanged" /></span>
    <input value="@searchString" @oninput="@Search" placeholder="@(searchString == null ? searchString : localizer["Search"])" class="form-control inputs input_search" type="search" id="search-input" name="SearchString">
</div>
<br>
@document_error

@if (warehouses == null)
{
    <text>Loading...</text>
}
else if (warehouses.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <div class="col-md-8 stretch-card mb-2">
        <div class="form-card mb-1 table-width">
            <div class="card-body mb-3">
                <div class="table-responsive fixed-table-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th class="counter-col"> </th>
                                @if (showColumns[0])
                                {
                                    <th><button class="@(sortOrder=="Address" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Address"))">@localizer["Address"]</button></th>
                                }
                                @if (showColumns[1])
                                {
                                    <th><button class="@(sortOrder=="Owner" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Owner"))">@localizer["Owner"]</button></th>
                                }
                                @if (showColumns[2])
                                {
                                    <th><button class="@(sortOrder=="Cargo_id" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Cargo_id"))">@localizer["Cargo_id"]</button></th>
                                }
                                @if (showColumns[3])
                                {
                                    <th><button style="min-width:5rem;" class="@(sortOrder=="Date" ? (desc ? "arrow-down" : "arrow-up") : "arrow-no-sorting")" @onclick="@(() => Sorting("Date"))">@localizer["Date"]</button></th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @{int rowCounter = 0 + pageSize * (currentPage-1);}
                            @foreach (Warehouses item in warehouses)
                            {
                                rowCounter += 1;
                                <tr>
                                    <td>@rowCounter</td>
                                  
                                    @if (showColumns[0])
                                    {
                                        <td>@item.Address</td>
                                    }
                                    @if (showColumns[1])
                                    {
                                        <td> @item.Owner </td>
                                    }
                                    @if (showColumns[2])
                                    {
                                        <td>@item.Cargo_ids</td>
                                    }
                                    @if (showColumns[3])
                                    {
                                        <td>@item.Date</td>
                                    }
                                    <td>
                                        <a class="btn  fixed" href="Warehouses/edit/@item.Id"> <span data-title="@localizer["Edit"]" class="oi oi-pencil" aria-hidden="true"></span></a>
                                        <button class="btn fixed2" @onclick="@(() => Delete(item.Id))"> <span data-title="@localizer["Delete"]" class="oi oi-trash" aria-hidden="true"></span></button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
                <div class="align-center pagination-style mt-2"> 
                    @if (currentPage != 1)
                    {
                        <i class="oi oi-media-skip-backward btn btn-pagination" id="prev" @onclick="PrevPage"></i>
                    }else
                    {
                         <i style="opacity:0;" class=" oi oi-media-skip-backward btn btn-pagination"></i>
                    }
                    @for (int i = currentPage - 2; i <= currentPage + 2; i++)
                    {
                        int j = i;
                        @if (i > 0 && i <= maxPage)
                        {
                            if (i == currentPage)
                            {
                                <span class="btn btn-pagination currentpage"  @onclick="() => ShowPage(j)">@i</span>
                            }
                            else
                            {
                                <span class="btn  btn-pagination"  @onclick="() => ShowPage(j)">@i</span>
                            }
                        }

                    }
                    @if(currentPage < maxPage)
                    {
                        <i class="oi oi-media-skip-forward btn btn-pagination" id="next" @onclick="NextPage"></i>
                    }
                    else
                    {
                        <i style="opacity:0;" class="oi oi-media-skip-forward btn btn-pagination"></i>
                    }
                </div>
            </div>
        </div>
    </div>

    @if (settings)
    {
        <Settings OnSettingsClosed="SettingsClosed" OnInputChanged="InputChanged" OnSettingsChanged="SettingsChanged" showColumns="@showColumns" settings="@settings" pageSize="@pageSize" />
    }
    else
    {
        <div class="mb-6"></div>
    }
}
@code {
    public bool settings = false;
    Warehouses[]? warehouses { get; set; }
    List<bool> showColumns = Enumerable.Repeat(true, 16).ToList();
    private int currentPage = 1;
    int pageSize = 10;
    int dataRows;
    float maxPage;
    private string sortOrder = "Date";
    private bool desc = false;
    private string? searchString = "";
    string? document_error;

    protected override async Task OnInitializedAsync()
    {
        PageHistoryState.AddPageToHistory("/Warehouses");
        base.OnInitialized();
        dataRows = await client.GetFromJsonAsync<int>("api/warehouses/pagecount");
        await ShowPage();
    }

    async Task Delete(int Id)
    {
        var data = warehouses.First(x => x.Id == Id);
        if (await js.InvokeAsync<bool>("confirm", $"{@localizer["Delete?"]} {data.Address} - {data.Cargo_ids} ({data.Id})"))
        {
            await client.DeleteAsync($"api/warehouses/delete/{Id}");
            var shouldreload = dataRows % ((currentPage == 1 ? currentPage : currentPage - 1) * pageSize);
            if (shouldreload == 1 && dataRows > 0) { navigationManager.NavigateTo("/Warehouses", true); }
            await OnInitializedAsync();
        }
    }

    public void SettingsClosed()
    {
        settings = !settings;
    }


    public void SettingsChanged(){}

    public async void InputChanged(int ChangedPageSize )
    {
        pageSize = ChangedPageSize;
        currentPage = 1;
        await ShowPage();
    }

    protected async Task NextPage()
    {
        currentPage++;
        await ShowPage();
    }

    protected async Task ShowPage(int i)
    {
        currentPage = i;
        await ShowPage();
    }

    protected async Task PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await ShowPage();
        }
    }

    protected async void Sorting(string column)
    {
        if (sortOrder == column)
        {
            desc = !desc;
        }
        else
        {
            sortOrder = column;
        }
        await ShowPage();
    }

    protected async Task Search(ChangeEventArgs args)
    {
        searchString = args.Value.ToString();
        await ShowPage();
    }


    protected async Task ShowPage()
    {
        if (pageSize < 1 || pageSize == null ){ pageSize = 10; }
        else if (pageSize >= dataRows) { pageSize = dataRows != 0 ? dataRows : 1 ; }
        maxPage = (int)Math.Ceiling((decimal)((float)dataRows / (float)pageSize));

        warehouses = await client.GetFromJsonAsync<Warehouses[]>($"api/warehouses/get?page={currentPage}&pageSize={pageSize}&sortOrder={sortOrder}&desc={desc}&searchString={searchString}");
        StateHasChanged();
    }

    private async Task ExportToPdf ()
    {
        //get base64 string from web api call
        var Response = await client.GetAsync($"api/warehouses/pdf?lang={CultureInfo.CurrentCulture.Name.ToString()}");

        if (Response.IsSuccessStatusCode)
        {
            var base64String = await Response.Content.ReadAsStringAsync();

            Random rnd = new Random();
            int random = rnd.Next(1000000, 9999999);
            string filename = "Warehouses" + random + "_" + DateTime.Now.ToString("dd-MM-yyyy") + ".pdf";

            //call javascript function to download the file
            await  js.InvokeVoidAsync(
                "downloadFile",
                "application/pdf",
                base64String,
                filename);
        }
        else
        {
            document_error = localizer["Document_failder_to_create"];
        }
    }

    private async Task ExportToExcel()
    {
        //get base64 string from web api call
        var Response = await client.GetAsync($"api/warehouses/excel?lang={CultureInfo.CurrentCulture.Name.ToString()}");

        if (Response.IsSuccessStatusCode)
        {
            var base64String = await Response.Content.ReadAsStringAsync();

            Random rnd = new Random();
            int random = rnd.Next(1000000, 9999999);
            string filename = "Warehouses" + random + "_" + DateTime.Now.ToString("dd-MM-yyyy") + ".xlsx";

            //call javascript function to download the file
            await js.InvokeVoidAsync(
                "downloadFile",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                base64String,
                filename);
        }
        else
        {
            document_error = localizer["Document_failder_to_create"];
        }
    }

    private async Task ExportToCSV(string format)
    {
        //get base64 string from web api call
        var Response = await client.GetAsync($"api/warehouses/csv?lang={CultureInfo.CurrentCulture.Name.ToString()}");

        if (Response.IsSuccessStatusCode)
        {
            var base64String = await Response.Content.ReadAsStringAsync();

            Random rnd = new Random();
            int random = rnd.Next(1000000, 9999999);
            string filename = "Warehouses" + random + "_" + DateTime.Now.ToString("dd-MM-yyyy") +"."+ format;
            //call javascript function to download the file
            await js.InvokeVoidAsync(
                "downloadFile",
                "text/" + format + ";charset=utf-8",
                base64String,
                filename);
        }
        else
        {
            document_error = localizer["Document_failder_to_create"];
        }
    }

    private async void StateChanged()
    {
        await OnInitializedAsync();
    }

}