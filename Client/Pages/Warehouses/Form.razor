

<EditForm class="form-col" Model="@warehouses" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="top-buttons-card">
        <div class="card-body">
                <div class="form-group">
                    @if (PageHistoryState.CanGoBack())
                {
                    <a href="@PageHistoryState.GetGoBackPage()"><span class="oi oi-arrow-circle-left" aria-hidden="true" ></span></a>
                }
            </div>
            <p class="edit-title">@localizer[TitleText]</p>
            <div class="form-group form-submit">
                <button type="submit" class="btn btn-success">
                    <i class="oi oi-circle-check"></i><div class="d-inline-block">@localizer[ButtonText]</div>
                </button>
            </div>
        </div>
    </div>

    <div class="form-card mb-6" style="border-top-left-radius:unset;border-top-right-radius:unset;">
        <div class="card-body mb-3">
                <div class="d-inline-block forms-margin-col">
                    <div class="form-group">
                        <div>
                        <label>@localizer["Address"]:</label>
                            <div>
                                <InputText class="form-control inputs" @bind-Value="@warehouses!.Address" />
                            <ValidationMessage For="@(() => warehouses.Address)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group ">
                        <div>
                        <label>@localizer["Owner"]:</label>
                            <div>
                            <InputText class="form-control inputs" @bind-Value="@warehouses.Owner" />
                                <ValidationMessage For="@(() => warehouses.Owner)" />
                            </div>
                        </div>
                    </div>
              </div>
        </div>
    </div>

</EditForm>


@code {
    [Parameter] public WarehousesDto? warehouses { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string TitleText { get; set; } = "";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    CargoesDto[]? cargoes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        cargoes = await client.GetFromJsonAsync<CargoesDto[]?>("api/cargoes/getcargoes");
    }
}