@page "/Trucks/edit/{Id:int}"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js


<Form ButtonText="Update" trucks="@truck" OnValidSubmit="@EditCargoAsync" TitleText="Edit_truck" checkValidSubmit="@CheckValidSubmit" />

@code {
    [Parameter] public int Id { get; set; }
    TrucksDto? truck = new TrucksDto();
    bool isValidSubmit = true;

    protected async override Task OnParametersSetAsync()
    {
        truck = await http.GetFromJsonAsync<TrucksDto>($"api/trucks/getById/{Id}");
    }

    async Task EditCargoAsync()
    {
        if (isValidSubmit)
        {
            if (truck != null)
            {
                truck.User_id = authStateProvider.GetCurrentUserAsync().Result.Id;
            }
            var text = @localizer["Succesfull_update"];
            await http.PutAsJsonAsync("api/trucks/put", truck);
            await js.InvokeVoidAsync("alert", $"{text}");
            uriHelper.NavigateTo("/Trucks");
        }

    }

    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory("/Trucks/edit/{Id:int}");
        base.OnInitialized();
    }

    public void CheckValidSubmit(bool valid)
    {
        isValidSubmit = valid;
    }
}