@page "/Trucks/edit/{Id:int}"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js


<Form ButtonText="Update" trucks="@truck" OnValidSubmit="@EditCargoAsync" TitleText="Edit_truck" checkValidSubmit="@CheckValidSubmit" />

@if (window)
{
    <SavedWindow OnClose="CloseWindow" />
}

@code {
    [Parameter] public int Id { get; set; }
    TruckDto? truck = new TruckDto();
    bool isValidSubmit = true;
    bool window = false;

    protected async override Task OnParametersSetAsync()
    {
        truck = await http.GetFromJsonAsync<TruckDto>($"api/trucks/getById/{Id}");
    }

    async Task EditCargoAsync()
    {
        if (isValidSubmit)
        {
            if (truck != null)
            {
                truck.UserId = authStateProvider.GetCurrentUserAsync().Result.Id;
            }
            var IsSaved = await http.PutAsJsonAsync("api/trucks/put", truck);
           
            if (IsSaved.IsSuccessStatusCode)
            {
                window = true;
            }
        }

    }

    public void CloseWindow()
    {
        window = false;
        uriHelper.NavigateTo("/Trucks");
    }

    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory("/Trucks/edit/{Id:int}");
        base.OnInitialized();
    }

    public void CheckValidSubmit(bool valid)
    {
        isValidSubmit = valid;
    }
}