

<EditForm class="form" Model="@trucks" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="top-buttons-card">
        <div class="card-body">
                <div class="form-group">
                    @if (PageHistoryState.CanGoBack())
                {
                    <a href="@PageHistoryState.GetGoBackPage()"><span class="oi oi-arrow-circle-left" aria-hidden="true" ></span></a>
                }
            </div>
            <p class="edit-title">@localizer[TitleText]</p>
                <div class="form-group form-submit">
                    <button @onclick="OnSaveData" type="submit" class="btn btn-success">
                        <i class="oi oi-circle-check"></i><div class="d-inline-block">@localizer[ButtonText]</div>
                    </button>
            </div>
        </div>
    </div>

    <div class="form-card mb-6" style="border-top-left-radius:unset;border-top-right-radius:unset;">
        <div class="card-body mb-3">

             <!--Error-->@if (error != "")
            {
            <p class="error-message ms-3 mb-2">
                <span class="icon iconify d-inline" style="color:darkred;" data-icon="material-symbols:error-circle-rounded-outline"></span>
                    @error
                </p>
            }

            <div class="d-inline-block forms-margin ">
                <div class="form-group ">
                    <div>
                    <label>@localizer["Brand"]:</label>
                        <div>
                            <InputText class="form-control inputs" @bind-Value="@trucks!.Brand" />
                            <ValidationMessage For="@(() => trucks.Brand)" />
                        </div>
                    </div>
                </div>
                <div class="form-group ">
                    <div>
                    <label>@localizer["Vehicle_registration_number"]:</label>
                        <div>
                            <InputText class="form-control inputs" @bind-Value="@trucks.VehicleRegistrationNumber" />
                            <ValidationMessage For="@(() => trucks.VehicleRegistrationNumber)" />
                        </div>
                    </div>
                </div>
                <div class="form-group ">
                    <div>
                        <label>@localizer["Max_weight"]:</label>
                        <div>
                            <InputNumber class="form-control inputs" min="0" @bind-Value="@trucks.MaxWeight" />
                            <ValidationMessage For="@(() => trucks.MaxWeight)" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="d-inline-block forms-margin second-col mt-3" >
                <div class="form-group custom-select">
                    <label>@localizer["Road_id"]:</label>
                    <input type="text" class="form-control custom-select-input" @bind="trucks.RoadId" @bind:event="oninput" placeholder="@localizer["Select_placeholder"]" />
                    <div class="custom-select-options">
                        @if (roads != null)
                        {
                        @foreach (var road in roads)
                            {
                                if (road.Id.ToString().ToLower().Contains((trucks.RoadId != null ? trucks.RoadId?.ToString() : "")!))
                                {
                                    <div class="custom-select-option" @onclick="() => {trucks.RoadId = road?.Id; }">
                                        @localizer["Id"]: @road.Id  <br>
                                        @localizer["Starting_place"]: @road.StartingPlace <br>
                                        @localizer["Ending_place"]: @road.EndingPlace <br>
                                        @localizer["Purpose_of_the_trip"]: @road.PurposeOfTheTrip <br>
                                        @localizer["Direction"]: @localizer[road?.Direction?.ToLower()!]
                                    </div>
                                }
                            }
                        }
                    </div>
                    <ValidationMessage For="@(() => trucks.RoadId)" />
                </div>
                <div class="form-group custom-select">
                    <label>@localizer["Status"]:</label>
                    <input type="text" class="form-control custom-select-input" @bind="@selectedOption" @bind:event="oninput" placeholder="@localizer["Select_placeholder"]" disabled/>
                    <div class="custom-select-options">
                        @foreach (var value in Enum.GetValues<Cargotruck.Shared.Model.Status>())
                        {
                            if (value.ToString().ToLower().Contains(value.ToString()))
                            {
                                <div class="custom-select-option" @onclick='() => {selectedOption = localizer[value.ToString()];trucks.Status=value; }'>
                                    @localizer[value.ToString()]
                                </div>
                            }
                        }
                    </div>
                    <ValidationMessage For="@(() => trucks.RoadId)" />
                </div>
            </div>
        </div>
    </div>

</EditForm>


@code {
    [Parameter] public TruckDto? trucks { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string TitleText { get; set; } = "";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback<bool> checkValidSubmit { get; set; }
    string error = "";
    string? selectedOption;
    List<RoadDto>? roads { get; set; }
    List<TruckDto>? trucksOnRoad { get; set; }

    protected override async Task OnInitializedAsync()
    {
        roads = await client.GetFromJsonAsync<List<RoadDto>?>("api/roads/getroads");
        if (trucks?.Status != null)
        {
            selectedOption = localizer[trucks?.Status.ToString()!];
        }
        trucksOnRoad = await client.GetFromJsonAsync<List<TruckDto>>("api/trucks/gettrucks");
        trucksOnRoad = trucksOnRoad?.Where(x => x.RoadId != null).ToList();
        if (trucksOnRoad != null)
        {
            foreach (var truck in trucksOnRoad)
            {
                roads?.RemoveAll(x => x.Id == truck.RoadId  && x.Id != trucks?.RoadId);
            }
        }
    }

    private async void OnSaveData()
    {
        error = "";
        var invalid = false;
        bool isValidSubmit = true;

        if (trucks?.RoadId  != null)
        {
            invalid = false;
            if (roads?.Count > 0)
            {
                @foreach (var road in roads)
                {
                    if (road.Id != trucks.RoadId)
                    {
                        invalid = true;
                    }
                    else
                    {
                        invalid = false;
                        break;
                    }
                }
            }
            else
            {
                invalid = true;
            }

            if (invalid)
            {
                isValidSubmit = false;
                trucks.RoadId = null;
                await checkValidSubmit.InvokeAsync(false);
                error += localizer["Road_id_invalid"] + " ";
            }

        }

        if (true)
        {
            invalid = false;
            @foreach (var value in Enum.GetValues<Cargotruck.Shared.Model.Status>())
            {
                if (value != trucks?.Status)
                {
                    invalid = true;
                }
                else
                {
                    invalid = false;
                    break;
                }
            }

            if (invalid)
            {
                isValidSubmit = false;
                await checkValidSubmit.InvokeAsync(false);
                error += localizer["Truck_status_invalid"] + " ";
            }

        }

        if (isValidSubmit)
        {
            await checkValidSubmit.InvokeAsync(true);
        }
    }
}