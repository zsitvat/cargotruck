<div class="col-md-6 stretch-card d-inline-block ">
    <div class="card ps-2">
        <div class="card-body">
            <h1 class="h4 font-weight-normal login-title align-center">
                @localizer["Edit_profile"]
            </h1>
            <EditForm class="profile-form" OnValidSubmit="OnSubmit" Model="updateRequest">
                <DataAnnotationsValidator />

                <label for="inputUsername" class="input-only">@localizer["Username"]</label>
                <InputText id="inputUsername" class="form-control" autofocus @bind-Value="@updateRequest.UserName" />
                <ValidationMessage For="@(() => updateRequest.UserName)" />

                <label for="inputEmail" class="input-only">@localizer["Email"]</label>
                <InputText type="text" id="inputEmail" class="form-control" @bind-Value="@updateRequest.Email" />
                <ValidationMessage For="@(() => updateRequest.Email)" />

                <label for="inputPhoneNumber" class="input-only">@localizer["Phone_number"]</label>
                <InputText type="text" id="inputPhoneNumber" class="form-control" @bind-Value="@updateRequest.PhoneNumber" />
                <ValidationMessage For="@(() => updateRequest.PhoneNumber)" />
                <AuthorizeView Roles="Admin" Context="admin">
                    <label for="inputRole" class="input-only">@localizer["Role"]</label>
                    <select for="inputRole" class="form-control" name="role" id="role" @bind="@updateRequest.Role">
                        <option value="User">@localizer["User"]</option>
                        <option value="Admin">@localizer["Admin"]</option>
                        <option value="Driver">@localizer["Driver"]</option>
                        <option value="Manager">@localizer["Manager"]</option>
                        <option value="Storageman">@localizer["Storageman"]</option>
                    </select>
                </AuthorizeView>
                <label for="inputimg" class="input-only">@localizer["Image"]</label>
                <InputFile type="text" id="inputimg" class="form-control" OnChange="@OnInputFileChange" @bind-Value="@updateRequest.Img" />
                <ValidationMessage For="@(() => updateRequest.Img)" />
                 <div class="container">
                    <div class="col-md-12 text-center">
                        <button class="btn btn-primary btn-block mt-4  center-button" type="submit">@localizer["Edit"]</button>
                    </div>
                </div>
                <label class="text-danger">@error</label>
            </EditForm>
        </div>
    </div>
</div>



@functions {

    UpdateRequest updateRequest { get; set; } = new UpdateRequest();
    string error { get; set; }

    async Task OnSubmit()
    {
        error = null;
        try
        {
            await authStateProvider.Update(updateRequest);
            navigationManager.NavigateTo("/profile", true);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 3;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 3000;
        var upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    var fileContent =
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType =
                        new MediaTypeHeaderValue(file.ContentType);

                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"img\"",
                        fileName: file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    error = "{FileName} not uploaded (Err: 6): {Message}" + file.Name +  ex.Message;

                    uploadResults.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
                }
            }
        }

        if (upload)
        {
            var response = await Http.PostAsync("/Filesave", content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<UploadResult>>();

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
            }
        }

        shouldRender = true;
    }

    private static bool FileUpload(IList<UploadResult> uploadResults, string? fileName,  out UploadResult result, string error)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            error = fileName + " not uploaded!";
        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }
}

