
@using System.Linq
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject ILogger<ChangeProfilePicture> Logger

<label for="inputimg" class="input-only imginput-label">@localizer["Image_change"]</label>
<InputFile id="inputimg" class="form-control"  OnChange="@OnInputFileChange" />

@code {
    [Parameter] public string? Id { get; set; }

    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 1;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 3000;
        var upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    var fileContent = 
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType = 
                        new MediaTypeHeaderValue(file.ContentType);

                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    Logger.LogInformation(
                        "{FileName} not uploaded (Err: 6): {Message}", 
                        file.Name, ex.Message);

                    uploadResults.Add(
                        new()
                        {
                            FileName = file.Name, 
                            ErrorCode = 6, 
                            Uploaded = false
                        });
                }
            }
        }

        if (Id == null) { Id = "NoId"; }

        if (upload)
        {
            HttpResponseMessage response = await Http.PostAsync($"api/filesave/{Id}", content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<UploadResult>>();

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();  
            }  
        }

        shouldRender = true;   
        await authStateProvider.GetCurrentUser();
        if (Id == "NoId") { 
            navigationManager.NavigateTo("/Profile", true); 
        }
        else { navigationManager.NavigateTo("/Admin", true); }
    }

    private static bool FileUpload(IList<UploadResult> uploadResults,
          string? fileName, ILogger<ChangeProfilePicture> logger, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }


}