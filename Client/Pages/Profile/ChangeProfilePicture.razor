@inject HttpClient Http

<label for="inputimg" class="input-only imginput-label mt-0">@localizer["Image_change"]</label>
<InputFile id="inputimg" class="form-control"  OnChange="@OnInputFileChange" />

<p class="file-upload-error error mt-1">@error</p>

@code {
    [Parameter] public string? Id { get; set; }
    string? error;

    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 1;
    private bool shouldRender;

    protected override bool ShouldRender() => shouldRender;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        long maxFileSize = 1024 * 3000;
        var upload = false;
        HttpResponseMessage response;
        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(f => f.FileName == file.Name) is null)
            {
                try
                {
                    var fileContent = 
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType = 
                        new MediaTypeHeaderValue(file.ContentType);

                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    error = file.Name + " " + localizer["Not_uploaded"] + " " + ex.Message;
                }
            }
        }

        if (Id == null) { Id = "NoId"; }

        if (upload)
        {
            response = await Http.PostAsync($"api/filesave/{Id}?lang={CultureInfo.CurrentCulture.Name.ToString()}", content);
            error = response.Content.ReadAsStringAsync().Result;

            shouldRender = true;   
            await authStateProvider.GetCurrentUser();

            if (response.IsSuccessStatusCode)
            {
                error = "";
                if (Id == "NoId") { 
                    navigationManager.NavigateTo("/Profile",true); 
                }
                else { navigationManager.NavigateTo("/Admin",true );}
            }
        }
    }

    private class File
    {
        public string? Name { get; set; }
    }


}