@page "/Monthly_expenses/create"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js

<Form ButtonText="Create" OnHandleChangeTask="@HandleChangeTask" OnHandleChangeExpense="@HandleChangeExpense" Monthly_expenses="@monthly_expense" OnValidSubmit="@CreateMonthlyExpenseAsync" TitleText="Create_monthly_expense" />

@code {
    List<int>? selectedTaskId;
    List<int>? selectedExpenseId;
    Monthly_expenses? monthly_expense = new Monthly_expenses();
    Monthly_expenses_tasks_expenses? Monthly_expenses_tasks_expenses = new Monthly_expenses_tasks_expenses();

    public void HandleChangeTask(List<int>? selected)
    {
        selectedTaskId = selected;
    }

    public void HandleChangeExpense(List<int>? selected)
    {
        selectedExpenseId = selected;
    }

    async Task CreateMonthlyExpenseAsync()
    {
        if (monthly_expense != null)
        {
            monthly_expense.User_id = authStateProvider.GetCurrentUserAsync().Result.Id;
        }
        var result = await http.PostAsJsonAsync("api/Monthly_expenses/post", monthly_expense);
        var IsFirstId = true;

        int lenght = 0;
        if (selectedTaskId != null && selectedExpenseId != null)
        {
            lenght = (selectedTaskId.Count > selectedExpenseId?.Count) ? selectedTaskId.Count : selectedExpenseId!.Count;
        }
        else if (selectedTaskId == null && selectedExpenseId != null)
        {
            lenght = selectedExpenseId.Count;
        }
        else if (selectedTaskId != null && selectedExpenseId == null)
        {
            lenght = selectedTaskId.Count;
        }
        else
        {
            lenght = 0;
        }
        Monthly_expenses_tasks_expenses!.Monthly_expense_id = Int32.Parse(result.Content.ReadAsStringAsync().Result.ToString());
        for (int i = 0; i < lenght; ++i)
        {
            Monthly_expenses_tasks_expenses.Task_id = null;
            Monthly_expenses_tasks_expenses.Expense_id = null;
            if (i > 0) { IsFirstId = false; }
            if (selectedTaskId != null && selectedTaskId.Count > i)
            {
                Monthly_expenses_tasks_expenses.Task_id = selectedTaskId[i];
            }
            if (selectedExpenseId != null && selectedExpenseId.Count > i)
            {
                Monthly_expenses_tasks_expenses.Expense_id = selectedExpenseId[i];
            }
            //Monthly_expenses_tasks_expenses.Monthly_expenses = monthly_expense;
            await http.PostAsJsonAsync($"api/monthly_expenses/postconnectionids?first={IsFirstId}", Monthly_expenses_tasks_expenses);
        }
        uriHelper.NavigateTo("/Monthly_expenses");
    }

    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory("/Monthly_expenses/create");
        base.OnInitialized();
    }
}