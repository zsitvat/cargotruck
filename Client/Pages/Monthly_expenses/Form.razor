

<EditForm Model="@Monthly_expenses" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="top-buttons-card">
        <div class="card-body">
                <div class="form-group">
                    @if (PageHistoryState.CanGoBack())
                {
                    <a href="@PageHistoryState.GetGoBackPage()"><span class="oi oi-arrow-circle-left" aria-hidden="true" ></span></a>
                }
            </div>
            <p class="edit-title">@localizer[TitleText]</p>
                <div class="form-group">
                    <button type="submit" class="btn btn-success">
                        <i class="oi oi-circle-check"></i> @localizer[ButtonText]
                    </button>
            </div>
        </div>
    </div>

    <div class="form-card mb-6" style="border-top-left-radius:unset;border-top-right-radius:unset;">
        <div class="card-body mb-3">
                <div class="d-inline-block forms-margin center-div">
                    <div class="form-group">
                        <div>
                        <label>@localizer["Earning"]:</label>
                            <div>
                            <InputNumber class="form-control inputs" @bind-Value="@Monthly_expenses.Earning" />
                            <ValidationMessage For="@(() => Monthly_expenses.Earning)" />
                            </div>
                        </div>
                    </div>
                    <div class="form-group ">
                        <div>
                        <label>@localizer["Profit"]:</label>
                            <div>
                            <InputNumber class="form-control inputs" @bind-Value="@Monthly_expenses.Profit" />
                                <ValidationMessage For="@(() => Monthly_expenses.Profit)" />
                            </div>
                        </div>
                    </div>
                     <div class="form-group">
                        <div>
                        <label>@localizer["Task_id"]:</label>
                            <div>
                            <select class="form-control" @onchange=HandleChangeTask multiple>
                                <option value="" selected disabled>@localizer["Select_placeholder"]</option>
                                @if (tasks != null)
                                    {
                                    @foreach (var task in tasks)
                                        {
                                        <option value="@task.Id">@task.Id</option>
                                        }
                                    }
                                </select>
                            <ValidationMessage For="@(() => Monthly_expenses_tasks_expenses.Task_id)" />
                            </div>
                        </div>
                    </div>
                     <div class="form-group">
                        <div>
                        <label>@localizer["Expense_id"]:</label>
                            <div>
                            <select class="form-control" @onchange=HandleChangeExpense multiple>
                                    <option value="" selected disabled>@localizer["Select_placeholder"]</option>
                                    @if (expenses != null)
                                    {
                                    @foreach (var expense in expenses)
                                        {
                                        <option value="@expense.Id">@expense.Id - @expense.Type_id/@expense.Type</option>
                                        }
                                    }
                                </select>
                            <ValidationMessage For="@(() => Monthly_expenses_tasks_expenses.Expense_id)" />
                            </div>
                        </div>
                    </div>
              </div>
        </div>
    </div>

</EditForm>


@code {
    [Parameter] public Monthly_expenses? Monthly_expenses { get; set; }
    [Parameter] public Monthly_expenses_tasks_expenses? Monthly_expenses_tasks_expenses { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string? TitleText { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }

    Tasks[]? tasks { get; set; }
    Expenses[]? expenses { get; set; }

    int[]? selectedTaskId;
    int[]? selectedExpenseId;
    protected override async Task OnInitializedAsync()
    {
        tasks = await client.GetFromJsonAsync<Tasks[]?>("api/tasks/gettasks");
        expenses = await client.GetFromJsonAsync<Expenses[]?>("api/expenses/getexpenses");
    }

    void HandleChangeTask(ChangeEventArgs args)
    {
        selectedTaskId = args.Value as int[];
        foreach (var id in selectedTaskId)
        {
            Monthly_expenses_tasks_expenses.Task_id = id;
        }   
    }
    void HandleChangeExpense(ChangeEventArgs args) {
        selectedExpenseId = args.Value as int[];
        foreach (var id in selectedExpenseId)
        {
            Monthly_expenses_tasks_expenses.Expense_id = id;
        }
    }

}