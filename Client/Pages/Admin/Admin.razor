@page "/Admin"
@using Cargotruck.Server.Models
@using Cargotruck.Shared.Models
@using Cargotruck.Shared.Resources
@using Microsoft.AspNetCore.Identity
@using Microsoft.Extensions.Localization

<h3>@localizer["Admin"]</h3>
<div class="form-group">
    <a class="btn btn-success" href="/Register"><i class="oi oi-plus"></i> @localizer["Create_new"]</a>
    @if (filter != null && filter != "")
    {
        <button @onclick="@(()=>onChangeResetFilter())" class="filter-button"><span class="icon iconify filter-icon" data-icon="material-symbols:filter-alt-off"></span></button>
    }
    else
    {
        <button @onclick="@(()=>onChangeResetFilter())" class="filter-button not-pointer"><span class="icon iconify filter-icon not-pointer" data-icon="material-symbols:filter-alt"></span></button>
    }
    @if(roles != null) {
        <select class="form-control filter" @oninput="@((e)=>onChangeGetFilter(e))" @bind="filter">
            <option value="" selected>@localizer["Nothing"]</option>
            @foreach (var role in roles.Values)
            {
                <option value="@role">@localizer[@role]</option>
            }
        </select>
    }
</div>
<br>

@if (users == null)
{
    <text><p class="text">@localizer["Loading"]</p></text>
}
else if (users.Length == 0)
{
    <text><p class="text">@localizer["No_records"]</p></text>
}
else
{
    <AuthorizeView>
        <Authorized>
            <div class="col-md-8 stretch-card mb-2 me-3">
                <div class="form-card mb-1 table-width">
                    <div class="card-body mb-3">
                        <div class="table-responsive fixed-table-body">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>#</th>
                                        <th>@localizer["Profile"]</th>
                                        <th>@localizer["Id"]</th>
                                        <th>@localizer["Username"]</th>
                                        <th>@localizer["Email"]</th>
                                        <th>@localizer["Phone_number"]</th>
                                        <th>@localizer["Role"]</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (Users item in users)
                                    {
                                        int i = 0;
                                        i += 1;
                                        <tr>
                                            <td>@i</td>
                                            @if(claims!=null){
                                                <td><img class="table-img" src="@claims[$"img/{@item.Id}"]" /></td>
                                            }
                                            <td style="min-width: 18rem;">@item.Id</td>
                                            <td>@item.UserName</td>
                                            <td>@item.Email</td>
                                            <td>@item.PhoneNumber</td>
                                            @if (roles!=null) { 
                                                <td>@roles[item.Id]</td>
                                            }
                                            <td>
                                                @if(item.UserName == context?.User?.Identity?.Name){
                                                    <a title="@localizer["Edit"]" class="btn fixed" href="/profile"><span class="oi oi-pencil" aria-hidden="true"></span></a>
                                                }else{
                                                    <a title="@localizer["Edit"]" class="btn fixed" href="/profile/Edit/@item.Id"><span class="oi oi-pencil" aria-hidden="true"></span></a>
                                                }
                                                <button title="@localizer["Delete"]" class="btn fixed2" @onclick="@(() => Delete(item.Id))"><span class="oi oi-trash" aria-hidden="true"></span></button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                        <Pagination CurrentPage="currentPage" PageSize="pageSize" DataRows="dataRows" MaxPage="maxPage" GetCurrentPage="GetCurrentPage" />
                    </div>
                </div>
            </div>
        </Authorized>
    </AuthorizeView>
}
@code {
    Users[]? users { get; set; }
    Dictionary<string, string>? claims { get; set; }
    Dictionary<string, string>? roles { get; set; }
    string? filter = "";
    private int currentPage = 1;
    int pageSize = 1;
    int dataRows;
    float maxPage;

    protected override async Task OnInitializedAsync()
    {
        await ShowPage();
    }

    protected async Task ShowPage()
    {
        dataRows = await client.GetFromJsonAsync<int>($"api/admin/pagecount?filter={filter}");
        if (pageSize < 1) { pageSize = 10; }
        else if (pageSize >= dataRows) { pageSize = dataRows != 0 ? dataRows : 1; }
        maxPage = (int)Math.Ceiling((decimal)((float)dataRows / (float)pageSize));
        claims = await client.GetFromJsonAsync<Dictionary<string, string>?>("api/admin/claims");
        roles = await client.GetFromJsonAsync<Dictionary<string, string>?>("api/admin/roles");
        users = await client.GetFromJsonAsync<Users[]>($"api/admin/get?page={currentPage}&pageSize={pageSize}&filter={filter}");
        StateHasChanged();
    }

    async Task Delete(string Id)
    {
        var u = users?.First(x => x.Id == Id);
        if (await js.InvokeAsync<bool>("confirm", $"{@localizer["Delete?"]} {u?.UserName} ({u?.Id})"))
        {
            await client.DeleteAsync($"api/admin/delete/{Id}");
            await OnInitializedAsync();
        }
    }

    async void onChangeGetFilter(ChangeEventArgs e)
    {
        filter = e.Value?.ToString();
        await OnInitializedAsync();
    }

    async void onChangeResetFilter()
    {
        filter = "";
        await OnInitializedAsync();
    }

    protected async Task GetCurrentPage(int CurrentPage)
    {
        currentPage = CurrentPage;
        await OnInitializedAsync();
    }
}