
<div class="settings-card mb-6">
    <div class="card-body mb-3">
        <div class="d-inline-block ms-5">
        <a class="btn btn-danger x" @onclick="@SettingsClosedAsync"><i class="oi oi-x"></i></a>
            <div class="form-group">
                <div>
                <label>
                        @localizer["Profile"]:
                    <input type="checkbox" @onchange="@(async () =>{ showColumns[0]=!showColumns[0]; await SettingsChangedAsync();})" class="form-check-input" checked="@showColumns[0]" />
                    </label>
                </div>
            </div>
            <div class="form-group ">
                <div>
                <label>
                        @localizer["Id"]:
                    <input type="checkbox" @onchange="@(async () =>{ showColumns[1]=!showColumns[1]; await SettingsChangedAsync();})" class="form-check-input" checked="@showColumns[1]" />
                    </label>
                </div>
            </div>
            <div class="form-group ">
                <div>
                <label>
                        @localizer["Username"]:
                    <input type="checkbox" @onchange="@(async () =>{ showColumns[2]=!showColumns[2]; await SettingsChangedAsync();})" class="form-check-input" checked="@showColumns[2]" />
                    </label>
                </div>
            </div>
            <div class="form-group ">
                <div>
                    <label>
                        @localizer["Email"]:
                        <input type="checkbox" @onchange="@(async () =>{ showColumns[3]=!showColumns[3]; await SettingsChangedAsync();})" class="form-check-input" checked="@showColumns[3]" />
                    </label>
                </div>
            </div>
            <div class="form-group">
                <div>
                    <label>
                        @localizer["Phone_number"]:
                        <input type="checkbox" @onchange="@(async () =>{ showColumns[4]=!showColumns[4]; await SettingsChangedAsync();})" class="form-check-input" checked="@showColumns[4]" />
                    </label>
                </div>
            </div>
            <div class="form-group ">
                <div>
                <label>
                        @localizer["Role"]:
                    <input type="checkbox" @onchange="@(async () =>{ showColumns[5]=!showColumns[5]; await SettingsChangedAsync();})" class="form-check-input" checked="@showColumns[5]" />
                    </label>
                </div>
            </div>

            <div class="form-group mt-2">
                <div>
                    <label>
                        @localizer["PageSize"]:
                        <input class="number-input" value="@pageSize" @oninput="@InputChangeAsync" type="number" />   
                    </label>
                </div>
            </div>
            <div class="form-group mt-2">
                <div>
                    <label>
                        @localizer["CurrencyExchangeWaitTime"]:
                        <input type ="number" class="number-input" value="@waitTimeSetting?.SettingValue" @oninput="@((e)=>SetWaitTimeAsync(e))" min="0"/>
                    </label>
                </div>
            </div>
        </div>
    </div>
</div>

   


@code {
    [Parameter] public List<bool> showColumns { get; set; } = new();
    [Parameter] public bool settings { get; set; }
    [Parameter] public int pageSize { get; set; }
    [Parameter] public  EventCallback  OnSettingsChanged { get; set; }
    [Parameter] public  EventCallback  OnSettingsClosed { get; set; }
    [Parameter] public EventCallback<int> OnInputChanged { get; set; }
    Cargotruck.Shared.Model.Setting? waitTimeSetting;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        waitTimeSetting = (await client.GetFromJsonAsync<Cargotruck.Shared.Model.Setting>("api/settings/getwaittime"));
    }

    protected async System.Threading.Tasks.Task SettingsChangedAsync()
    {
        await OnSettingsChanged.InvokeAsync();
    }

    protected async System.Threading.Tasks.Task SettingsClosedAsync()
    {
        await OnSettingsClosed.InvokeAsync();
    }

    private async System.Threading.Tasks.Task InputChangeAsync(ChangeEventArgs e)
    {
        pageSize = string.IsNullOrEmpty(e?.Value?.ToString()) ? pageSize : Int32.Parse(e.Value?.ToString()!);
        await OnInputChanged.InvokeAsync(pageSize);
    }

    protected async System.Threading.Tasks.Task SetWaitTimeAsync(ChangeEventArgs e)
    {
        if (waitTimeSetting != null)
        {
            waitTimeSetting.SettingValue = e.Value?.ToString();
            await client.PutAsJsonAsync("api/settings/put", waitTimeSetting);
        }
        await SettingsChangedAsync();
    }
}