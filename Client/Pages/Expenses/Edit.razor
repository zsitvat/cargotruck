@page "/Expenses/edit/{Id:int}"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js

<Form ButtonText="Update" expenses="@expense" OnValidSubmit="@EditExpenseAsync" TitleText="Edit_expense" checkValidSubmit="@CheckValidSubmit" />

@if (window)
{
    <SavedWindow OnClose="CloseWindow" />
}

@code {
    [Parameter] public int Id { get; set; }
    bool isValidSubmit = true;
    ExpenseDto? expense = new ExpenseDto();
    bool window = false;

    protected async override Task OnParametersSetAsync()
    {
        expense = await http.GetFromJsonAsync<ExpenseDto>($"api/expenses/getById/{Id}");
        expense!.Type = null;
    }

    async Task EditExpenseAsync()
    {
        if (isValidSubmit)
        {
            if (expense != null)
            {
                expense.UserId = authStateProvider.GetCurrentUserAsync().Result.Id;
            }
            var IsSaved = await http.PutAsJsonAsync("api/expenses/put", expense);
            
            if (IsSaved.IsSuccessStatusCode)
            {
                window = true;
            }
        }
    }

    public void CloseWindow()
    {
        window = false;
        uriHelper.NavigateTo("/Expenses");
    }

    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory("/Expenses/edit/{Id:int}");
        base.OnInitialized();
    }

    public void CheckValidSubmit(bool valid)
    {
        isValidSubmit = valid;
    }
}