@page "/Expenses/edit/{Id:int}"
@inject HttpClient http
@inject NavigationManager uriHelper
@inject IJSRuntime js


<Form ButtonText="Update" expenses="@expense" OnValidSubmit="@EditExpenseAsync" TitleText="Edit_expense" checkValidSubmit="@CheckValidSubmit" />

@code {
    [Parameter] public int Id { get; set; }
    bool isValidSubmit = true;
    ExpensesDto? expense = new ExpensesDto();

    protected async override Task OnParametersSetAsync()
    {
        expense = await http.GetFromJsonAsync<ExpensesDto>($"api/expenses/getById/{Id}");
        expense!.Type = null;
    }

    async Task EditExpenseAsync()
    {
        if (isValidSubmit)
        {
            if (expense != null)
            {
                expense.User_id = authStateProvider.GetCurrentUserAsync().Result.Id;
            }
            var text = @localizer["Succesfull_update"];
            await http.PutAsJsonAsync("api/expenses/put", expense);
            await js.InvokeVoidAsync("alert", $"{text}");
            uriHelper.NavigateTo("/Expenses");
        }
    }

    protected override void OnInitialized()
    {
        PageHistoryState.AddPageToHistory("/Expenses/edit/{Id:int}");
        base.OnInitialized();
    }

    public void CheckValidSubmit(bool valid)
    {
        isValidSubmit = valid;
    }
}