

<EditForm class="form-col" Model="@expenses" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="top-buttons-card">
        <div class="card-body">
            <div class="form-group">
                @if (PageHistoryState.CanGoBack())
                {
                    <a href="@PageHistoryState.GetGoBackPage()"><span class="oi oi-arrow-circle-left" aria-hidden="true" ></span></a>
                }
            </div>
            <p class="edit-title">@localizer[TitleText]</p>
                <div class="form-group form-submit">
                    <button @onclick="OnSaveData" type="submit" class="btn btn-success">
                        <i class="oi oi-circle-check"></i><div class="d-inline-block">@localizer[ButtonText]</div>
                    </button>
               </div>
        </div>
    </div>

    <div class="form-card mb-6" style="border-top-left-radius:unset;border-top-right-radius:unset;">
        <div class="card-body mb-3">

             <!--Error-->@if (error != "")
            {
            <p class="error-message ms-3 mb-2">
                <span class="icon iconify d-inline" style="color:darkred;" data-icon="material-symbols:error-circle-rounded-outline"></span>
                    @error
                </p>
            }

            <div class="d-inline-block forms-margin-col">
                <div class="form-group custom-select">
                    <label>@localizer["Type"]:</label>
                    <input type="text" class="form-control custom-select-input" @bind="selectedOption" @bind:event="oninput" placeholder="@localizer["Select_placeholder"]" disabled />
                    <div class="custom-select-options">
                        @foreach (var value in Enum.GetValues<Cargotruck.Shared.Model.Type>())
                        {

                            <div class="custom-select-option" @onclick="() => {SelectTypeValue(value);}">
                                @localizer[value.ToString()]
                            </div>
                            
                        }
                    </div>
                    <ValidationMessage For="@(() => expenses!.Type)" />
                </div>
                @if (expenses?.Type.ToString() == "task" || expenses?.Type.ToString() == "repair" || expenses?.Type.ToString() == "storage")
                {
                    <div class="form-group custom-select">
                        <label>@localizer["Type_id"]:</label>
                        <input type="text" class="form-control custom-select-input" @bind="expenses.TypeId" @bind:event="oninput" placeholder="@localizer["Select_placeholder"]" />
                        <div class="custom-select-options">
                            @switch (expenses?.Type.ToString())
                            {
                                case "task":
                                    @if (tasks != null)
                                    {
                                        @foreach (var task in tasks)
                                        {
                                            if (task.Id.ToString().ToLower().Contains((expenses.TypeId != null ? expenses.TypeId?.ToString() : "")!))
                                            {
                                                <div class="custom-select-option" @onclick="() => { expenses.TypeId = task.Id; }">
                                                    @localizer["Id"]: @task.Id <br>
                                                    @localizer["Partner"]: @task.Partner <br>
                                                    @localizer["Place_of_receipt"]: @task.PlaceOfReceipt <br>
                                                    @localizer["Place_of_delivery"]: @task.PlaceOfDelivery <br>
                                                    @localizer["Date"]: @task.Date <br>
                                                    @localizer["Description"]: @task.Description?.Substring(0, task.Description.Length >= 50 ? 50 : task.Description.Length)
                                                </div>
                                            }
                                        }
                                    }
                                break;
                                case "repair":
                                    @if (roads != null)
                                    {
                                        @foreach (var road in roads)
                                        {
                                            if (road.Id.ToString().ToLower().Contains((expenses.TypeId != null ? expenses.TypeId?.ToString() : "")!))
                                            {
                                                <div class="custom-select-option" @onclick="() => { expenses.TypeId = road?.Id; }">
                                                     @localizer["Id"]: @road.Id  <br>
                                                     @localizer["Purpose_of_the_trip"]: @road.PurposeOfTheTrip  <br>
                                                     @localizer["Direction"]: @localizer[road?.Direction?.ToLower()!] <br>
                                                     @localizer["Date"]: @road?.Date 
                                                </div>
                                            }
                                        }
                                    }
                                break;
                                case "storage":
                                    @if (cargoes != null)
                                    {
                                        @foreach (var cargo in cargoes)
                                        {
                                            if (cargo.Id.ToString().ToLower().Contains((expenses.TypeId != null ? expenses.TypeId?.ToString() : "")!))
                                            {
                                                <div class="custom-select-option" @onclick="() => { expenses.TypeId = cargo.Id; }">
                                                     @localizer["Id"]: @cargo.Id  <br>
                                                     @localizer["Task_id"]: @cargo.TaskId <br>
                                                     @localizer["Description"]:@cargo.Description
                                                </div>
                                            }
                                        }
                                    }
                                break;
                                }
                        </div>
                        <ValidationMessage For="@(() => expenses!.TypeId)" />
                    </div>
                 }
                @if (expenses?.Type.ToString() == "task" || expenses?.Type.ToString() == "othertype")
                {
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Fuel"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Fuel" />
                                <ValidationMessage For="@(() => expenses.Fuel)" />
                            </div>
                        </div>
                    </div>
                 }
                @if (expenses?.Type.ToString() == "task" || expenses?.Type.ToString() == "othertype")
                {
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Road_fees"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.RoadFees" />
                                <ValidationMessage For="@(() => expenses.RoadFees)" />
                            </div>
                        </div>
                    </div>
                 }
                @if (expenses?.Type.ToString() == "task" || expenses?.Type.ToString() == "othertype")
                {
                     <div class="form-group ">
                        <div>
                            <label>@localizer["Penalty"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Penalty" />
                                <ValidationMessage For="@(() => expenses.Penalty)" />
                            </div>
                        </div>
                    </div>
                 }
                @if (expenses?.Type.ToString() == "task" || expenses?.Type.ToString() == "othertype")
                {
                     <div class="form-group ">
                        <div>
                            <label>@localizer["Driver_spending"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.DriverSpending" />
                                <ValidationMessage For="@(() => expenses.DriverSpending)" />
                            </div>
                        </div>
                    </div>
                 }
                @if (expenses?.Type.ToString() == "salary")
                {
                     <div class="form-group ">
                        <div>
                        <label>@localizer["Driver_salary"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.DriverSalary" />
                                <ValidationMessage For="@(() => expenses.DriverSalary)" />
                            </div>
                        </div>
                    </div>
                }
                @if(expenses?.Type.ToString() == "repair"){
                    <div class="form-group ">
                        <div>
                        <label>@localizer["Repair_cost"]:</label>
                            <div>
                            <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.RepairCost" />
                            <ValidationMessage For="@(() => expenses.RepairCost)" />
                            </div>
                        </div>
                    </div>
                     <div class="form-group ">
                        <div>
                        <label>@localizer["Repair_description"]:</label>
                            <div>
                            <InputText class="form-control inputs" @bind-Value="@expenses.RepairDescription" />
                            <ValidationMessage For="@(() => expenses.RepairDescription)" />
                            </div>
                        </div>
                    </div>
                }
                @if (expenses?.Type.ToString() == "storage")
                {
                     <div class="form-group ">
                        <div>
                        <label>@localizer["Cost_of_storage"]:</label>
                            <div>
                            <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.CostOfStorage" />
                            <ValidationMessage For="@(() => expenses.CostOfStorage)" />
                            </div>
                        </div>
                    </div>
                }
                @if (expenses?.Type != null)
                {
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Other"]:</label>
                            <div>
                            <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Other" />
                            <ValidationMessage For="@(() => expenses.Other)" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
   </div>
</EditForm>


@code {
    [Parameter] public ExpenseDto? expenses { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string TitleText { get; set; } = "";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback<bool> checkValidSubmit { get; set; }
    public ExpenseDto? tmp { get; set; } = default;
    string error = "";
    string? selectedOption="";
    List<CargoDto>? cargoes { get; set; }
    List<DeliveryTaskDto>? tasks { get; set; }
    List<RoadDto>? roads { get; set; }


    protected override async Task OnInitializedAsync()
    {
        cargoes = await client.GetFromJsonAsync<List<CargoDto>?>("api/cargoes/getcargoes");
        tasks = await client.GetFromJsonAsync<List<DeliveryTaskDto>?>("api/tasks/gettasks");
        roads = await client.GetFromJsonAsync<List<RoadDto>?>("api/roads/getroads");
        var expenseWithIds = await client.GetFromJsonAsync<List<ExpenseDto>>("api/expenses/getexpenses");
        if (expenseWithIds != null) 
        {
            foreach (var expense in expenseWithIds)
            {
                if (expense.Type != null) {
                    var value = expense.Type.Value.ToString();
                    roads?.RemoveAll(x => x.Id == expense.TypeId && value == "repair" &&
                        x.Id != expenses?.TypeId);

                    tasks?.RemoveAll(x => x.Id == expense.TypeId && value == "task" &&
                        x.Id != expenses?.TypeId);

                    cargoes?.RemoveAll(x => x.Id == expense.TypeId && value == "storage" &&
                        x.Id != expenses?.TypeId);
                }
            }
        }
    }

    public void SelectTypeValue(Cargotruck.Shared.Model.Type value)
    {
        if (expenses!.Type != value)
        {
            tmp = expenses;
            expenses.Fuel = default;
            expenses.Other = default;
            expenses.DriverSpending = default;
            expenses.DriverSalary = default;
            expenses.RoadFees = default;
            expenses.CostOfStorage = default;
            expenses.Penalty = default;
            expenses.RepairCost = default;
            expenses.RepairDescription = default;
            expenses.TypeId = default;
            expenses.TotalAmount = default;
        }
        selectedOption = localizer[value.ToString()!]; 
        expenses!.Type = value;
    }

    private async void OnSaveData()
    {
        error = "";
        var invalid = false;
        bool isValidSubmit = true;

        if (expenses?.Type != null)
        {
            invalid = false;
            @foreach (var value in Enum.GetValues<Cargotruck.Shared.Model.Type>())
            {
                if (value != expenses.Type)
                {
                    invalid = true;
                }
                else
                {
                    invalid = false;
                    break;
                }
            }

            if (invalid)
            {
                isValidSubmit = false;
                expenses.Type = null;
                await checkValidSubmit.InvokeAsync(false);
                error += localizer["expense_type_invalid"] + " ";
            }

        }

        if (expenses?.TypeId != null)
        {
            invalid = false;

            switch (expenses?.Type.ToString())
            {
                case "task":
                    if (tasks?.Count > 0)
                    {
                        @foreach (var task in tasks)
                        {
                            if (task.Id != expenses?.TypeId)
                            {
                                invalid = true;
                            }
                            else
                            {
                                invalid = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        invalid = true;
                    }
                    break;
                case "repair":
                    if (roads?.Count > 0)
                    {
                        @foreach (var road in roads)
                        {
                            if (road.Id != expenses?.TypeId)
                            {
                                invalid = true;
                            }
                            else
                            {
                                invalid = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        invalid = true;
                    }
                    break;
                case "storage":
                    if (cargoes?.Count > 0)
                    {
                        @foreach (var cargo in cargoes)
                        {
                            if (cargo.Id != expenses?.TypeId)
                            {
                                invalid = true;
                            }
                            else
                            {
                                invalid = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        invalid = true;
                    }
                    break;
            }
            
            if (invalid)
            {
                isValidSubmit = false;
                expenses!.TypeId = null;
                await checkValidSubmit.InvokeAsync(false);
                error += localizer["id_invalid"] + " ";
            }

        }

        if (isValidSubmit && expenses?.Type != null)
        {
            await checkValidSubmit.InvokeAsync(true);
        }
    }

}