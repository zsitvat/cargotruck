

<EditForm class="form-col" Model="@expenses" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="top-buttons-card">
        <div class="card-body">
            <div class="form-group">
                @if (PageHistoryState.CanGoBack())
                {
                    <a href="@PageHistoryState.GetGoBackPage()"><span class="oi oi-arrow-circle-left" aria-hidden="true" ></span></a>
                }
            </div>
            <p class="edit-title">@localizer[TitleText]</p>
                <div class="form-group form-submit">
                    <button @onclick="OnSaveData" type="submit" class="btn btn-success">
                        <i class="oi oi-circle-check"></i><div class="d-inline-block">@localizer[ButtonText]</div>
                    </button>
               </div>
        </div>
    </div>

    <div class="form-card mb-6" style="border-top-left-radius:unset;border-top-right-radius:unset;">
        <div class="card-body mb-3">

             <!--Error-->@if (error != "")
            {
            <p class="error-message ms-3 mb-2">
                <span class="icon iconify d-inline" style="color:darkred;" data-icon="material-symbols:error-circle-rounded-outline"></span>
                    @error
                </p>
            }

            <div class="d-inline-block forms-margin-col">
                <div class="form-group custom-select">
                    <label>@localizer["Type"]:</label>
                    <input type="text" class="form-control custom-select-input" @bind="selectedOption" @bind:event="oninput" placeholder="@localizer["Select_placeholder"]" disabled />
                    <div class="custom-select-options">
                        @foreach (var value in Enum.GetValues<Cargotruck.Shared.Models.Type>())
                        {
                           
                            <div class="custom-select-option" @onclick="() => {selectedOption=localizer[value.ToString()!];expenses.Type = value;}">
                                @localizer[value.ToString()]
                            </div>
                            
                        }
                    </div>
                    <ValidationMessage For="@(() => expenses.Type)" />
                </div>
                @if (expenses?.Type.ToString() == "task" || expenses?.Type.ToString() == "repair" || expenses?.Type.ToString() == "storage")
                {
                    <div class="form-group custom-select">
                        <label>@localizer["Type_id"]:</label>
                        <input type="text" class="form-control custom-select-input" @bind="expenses.Type_id" @bind:event="oninput" placeholder="@localizer["Select_placeholder"]" />
                        <div class="custom-select-options">
                            @switch (expenses?.Type.ToString())
                            {
                                case "task":
                                    @if (tasks != null)
                                    {
                                        @foreach (var task in tasks)
                                        {
                                            if (task.Id.ToString().ToLower().Contains(expenses.Type_id != null ? expenses.Type_id?.ToString() : ""))
                                            {
                                                <div class="custom-select-option" @onclick="() => { expenses.Type_id = task.Id; }">
                                                    @task.Id - @task.Date - @task.Description?.Substring(0, task.Description.Length >= 50 ? 50 : task.Description.Length)
                                                </div>
                                            }
                                        }
                                    }
                                break;
                                case "repair":
                                    @if (roads != null)
                                    {
                                        @foreach (var road in roads)
                                        {
                                            if (road.Id.ToString().ToLower().Contains(expenses.Type_id != null ? expenses.Type_id?.ToString() : ""))
                                            {
                                                <div class="custom-select-option" @onclick="() => { expenses.Type_id = road.Id; }">
                                                    @road.Id  - @road.Purpose_of_the_trip - @road.Date 
                                                </div>
                                            }
                                        }
                                    }
                                break;
                                case "storage":
                                    @if (cargoes != null)
                                    {
                                        @foreach (var cargo in cargoes)
                                        {
                                            if (cargo.Id.ToString().ToLower().Contains(expenses.Type_id != null ? expenses.Type_id?.ToString() : ""))
                                            {
                                                <div class="custom-select-option" @onclick="() => { expenses.Type_id = cargo.Id; }">
                                                    @cargo.Id  - @cargo.Task_id - @cargo.Description
                                                </div>
                                            }
                                        }
                                    }
                                break;
                                }
                        </div>
                        <ValidationMessage For="@(() => expenses.Type_id)" />
                    </div>
                 }
                @if (expenses?.Type.ToString() == "task" || expenses?.Type.ToString() == "other")
                {
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Fuel"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Fuel" />
                                <ValidationMessage For="@(() => expenses.Fuel)" />
                            </div>
                        </div>
                    </div>
                 }
                @if (expenses?.Type.ToString() == "task" || expenses?.Type.ToString() == "other")
                {
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Road_fees"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Road_fees" />
                                <ValidationMessage For="@(() => expenses.Road_fees)" />
                            </div>
                        </div>
                    </div>
                 }
                @if (expenses?.Type.ToString() == "task" || expenses?.Type.ToString() == "other")
                {
                     <div class="form-group ">
                        <div>
                            <label>@localizer["Penalty"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Penalty" />
                                <ValidationMessage For="@(() => expenses.Penalty)" />
                            </div>
                        </div>
                    </div>
                 }
                @if (expenses?.Type.ToString() == "task" || expenses?.Type.ToString() == "other")
                {
                     <div class="form-group ">
                        <div>
                            <label>@localizer["Driver_spending"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Driver_spending" />
                                <ValidationMessage For="@(() => expenses.Driver_spending)" />
                            </div>
                        </div>
                    </div>
                 }
                @if (expenses?.Type.ToString() == "salary")
                {
                     <div class="form-group ">
                        <div>
                        <label>@localizer["Driver_salary"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Driver_salary" />
                                <ValidationMessage For="@(() => expenses.Driver_salary)" />
                            </div>
                        </div>
                    </div>
                }
                @if(expenses?.Type.ToString() == "repair"){
                    <div class="form-group ">
                        <div>
                        <label>@localizer["Repair_cost"]:</label>
                            <div>
                            <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Repair_cost" />
                            <ValidationMessage For="@(() => expenses.Repair_cost)" />
                            </div>
                        </div>
                    </div>
                     <div class="form-group ">
                        <div>
                        <label>@localizer["Repair_description"]:</label>
                            <div>
                            <InputText class="form-control inputs" @bind-Value="@expenses.Repair_description" />
                            <ValidationMessage For="@(() => expenses.Repair_description)" />
                            </div>
                        </div>
                    </div>
                }
                @if (expenses?.Type.ToString() == "storage")
                {
                     <div class="form-group ">
                        <div>
                        <label>@localizer["Cost_of_storage"]:</label>
                            <div>
                            <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Cost_of_storage" />
                            <ValidationMessage For="@(() => expenses.Cost_of_storage)" />
                            </div>
                        </div>
                    </div>
                }
                @if (expenses?.Type != null)
                {
                    <div class="form-group ">
                        <div>
                            <label>@localizer["other"]:</label>
                            <div>
                            <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Other" />
                            <ValidationMessage For="@(() => expenses.Other)" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
   </div>
</EditForm>


@code {
    [Parameter] public Expenses? expenses { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string TitleText { get; set; } = "";
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    [Parameter] public EventCallback<bool> checkValidSubmit { get; set; }
    string error = "";
    string? selectedOption="";
    List<Cargoes>? cargoes { get; set; }
    List<Tasks>? tasks { get; set; }
    List<Roads>? roads { get; set; }


    protected override async Task OnInitializedAsync()
    {
        cargoes = await client.GetFromJsonAsync<List<Cargoes>?>("api/cargoes/getcargoes");
        tasks = await client.GetFromJsonAsync<List<Tasks>?>("api/tasks/gettasks");
        roads = await client.GetFromJsonAsync<List<Roads>?>("api/roads/getroads");
        var expenseWithIds = await client.GetFromJsonAsync<List<Expenses>>("api/expenses/getexpenses");
        foreach (var expense in expenseWithIds)
        {
            if(expense.Type != null){
                var value = expense.Type.Value.ToString();
                roads?.RemoveAll(x => x.Id == expense.Type_id && value == "repair" &&
                    x.Id != expenses?.Type_id);

                tasks?.RemoveAll(x => x.Id == expense.Type_id && value == "task" &&
                    x.Id != expenses?.Type_id);

                cargoes?.RemoveAll(x => x.Id == expense.Type_id && value == "storage" &&
                    x.Id != expenses?.Type_id);
            }
        }
    }

    private async void OnSaveData()
    {
        error = "";
        var invalid = false;
        bool isValidSubmit = true;

        if (expenses?.Type != null)
        {
            invalid = false;
            @foreach (var value in Enum.GetValues<Cargotruck.Shared.Models.Type>())
            {
                if (value != expenses.Type)
                {
                    invalid = true;
                }
                else
                {
                    invalid = false;
                    break;
                }
            }

            if (invalid)
            {
                isValidSubmit = false;
                expenses.Type = null;
                await checkValidSubmit.InvokeAsync(false);
                error += CultureInfo.CurrentCulture.Name == "hu" ? "A kiadás típus értéke nem érvényes. " : "The expense type's value is not valid. ";
            }

        }

        if (expenses?.Type_id != null)
        {
            invalid = false;

            switch (expenses?.Type.ToString())
            {
                case "task":
                    if (tasks?.Count > 0)
                    {
                        @foreach (var task in tasks)
                        {
                            if (task.Id != expenses?.Type_id)
                            {
                                invalid = true;
                            }
                            else
                            {
                                invalid = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        invalid = true;
                    }
                    break;
                case "repair":
                    if (roads?.Count > 0)
                    {
                        @foreach (var road in roads)
                        {
                            if (road.Id != expenses?.Type_id)
                            {
                                invalid = true;
                            }
                            else
                            {
                                invalid = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        invalid = true;
                    }
                    break;
                case "storage":
                    if (cargoes?.Count > 0)
                    {
                        @foreach (var cargo in cargoes)
                        {
                            if (cargo.Id != expenses?.Type_id)
                            {
                                invalid = true;
                            }
                            else
                            {
                                invalid = false;
                                break;
                            }
                        }
                    }
                    else
                    {
                        invalid = true;
                    }
                    break;
            }
            
            if (invalid)
            {
                isValidSubmit = false;
                expenses.Type_id = null;
                await checkValidSubmit.InvokeAsync(false);
                error += CultureInfo.CurrentCulture.Name == "hu" ? "Az azonosító értéke nem érvényes. " : "The id's value is not valid. ";
            }

        }

        if (isValidSubmit && expenses?.Type != null)
        {
            await checkValidSubmit.InvokeAsync(true);
        }
    }

}