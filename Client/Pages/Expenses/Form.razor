

<EditForm class="form-col" Model="@expenses" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="top-buttons-card">
        <div class="card-body">
                <div class="form-group">
                    @if (PageHistoryState.CanGoBack())
                {
                    <a href="@PageHistoryState.GetGoBackPage()"><span class="oi oi-arrow-circle-left" aria-hidden="true" ></span></a>
                }
            </div>
            <p class="edit-title">@localizer[TitleText]</p>
                <div class="form-group">
                    <button type="submit" class="btn btn-success">
                        <i class="oi oi-circle-check"></i> @localizer[ButtonText]
                    </button>
            </div>
        </div>
    </div>

    <div class="form-card mb-6" style="border-top-left-radius:unset;border-top-right-radius:unset;">
        <div class="card-body mb-3">
            <div class="d-inline-block forms-margin-col">
                <div class="form-group">
                    <div>
                        <label>@localizer["Type"]:</label>
                        <div>
                            <select id="Type" class="form-control inputs" @oninput="@((e)=>onChangeGetType(e))" @bind="@expenses.Type">
                                <option  selected disabled>@localizer["Select_placeholder"]</option>
                                @foreach (var value in Enum.GetValues<Cargotruck.Shared.Models.Type>())
                                {
                                    <option value="@value">@localizer[value.ToString()]</option> 
                                }
                            </select>
                            <ValidationMessage For="@(() => expenses.Type)" />
                        </div>
                    </div>
                </div>
                 @if(type != "salary" && type != "other" && type != null){
                     <div class="form-group">
                        <div>
                        <label>@localizer["Type_id"]:</label>
                            <div>
                                <InputSelect class="form-control inputs" @bind-Value="@expenses.Type_id">
                                    <option value="" selected disabled>@localizer["Select_placeholder"]</option>
                                    @switch(type) 
                                        {
                                        case "task":
                                            @if (tasks != null)
                                            {
                                                @foreach (var task in tasks)
                                                {
                                                    <option value="@task.Id">@task.Id - @task.Date - @task.Description.Substring(0, task.Description.Length >= 50 ? 50 : task.Description.Length)</option>
                                                }
                                            }
                                        break;
                                        case "repair":
                                            @if (roads != null)
                                            {
                                                @foreach (var road in roads)
                                                {
                                                    <option value="@road.Id">@road.Id  - @road.Purpose_of_the_trip - @road.Date </option>
                                                }
                                            }
                                        break;
                                        case "storage":
                                             @if (cargoes != null)
                                            {
                                                @foreach (var cargo in cargoes)
                                                {
                                                    <option value="@cargo.Id">@cargo.Id  - @cargo.Task_id - @cargo.Description </option>
                                                }
                                            }
                                        break;
                                        };
                                </InputSelect>
                                <ValidationMessage For="@(() => expenses.Type_id)" />
                            </div>
                        </div>
                     </div>
                 }
                 @if(type == "task" || type == "other" ){
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Fuel"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Fuel" />
                                <ValidationMessage For="@(() => expenses.Fuel)" />
                            </div>
                        </div>
                    </div>
                 }
                 @if(type == "task" || type=="other" ){
                    <div class="form-group ">
                        <div>
                            <label>@localizer["Road_fees"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Road_fees" />
                                <ValidationMessage For="@(() => expenses.Road_fees)" />
                            </div>
                        </div>
                    </div>
                 }
                 @if(type == "task" || type=="other" ){
                     <div class="form-group ">
                        <div>
                            <label>@localizer["Penalty"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Penalty" />
                                <ValidationMessage For="@(() => expenses.Penalty)" />
                            </div>
                        </div>
                    </div>
                 }
                 @if(type == "task" || type=="other"){
                     <div class="form-group ">
                        <div>
                            <label>@localizer["Driver_spending"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Driver_spending" />
                                <ValidationMessage For="@(() => expenses.Driver_spending)" />
                            </div>
                        </div>
                    </div>
                 }
                @if(type == "salary"){
                     <div class="form-group ">
                        <div>
                        <label>@localizer["Driver_salary"]:</label>
                            <div>
                                <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Driver_salary" />
                                <ValidationMessage For="@(() => expenses.Driver_salary)" />
                            </div>
                        </div>
                    </div>
                }
                @if(type == "repair"){
                    <div class="form-group ">
                        <div>
                        <label>@localizer["Repair_cost"]:</label>
                            <div>
                            <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Repair_cost" />
                            <ValidationMessage For="@(() => expenses.Repair_cost)" />
                            </div>
                        </div>
                    </div>
                     <div class="form-group ">
                        <div>
                        <label>@localizer["Repair_description"]:</label>
                            <div>
                            <InputText class="form-control inputs" @bind-Value="@expenses.Repair_description" />
                            <ValidationMessage For="@(() => expenses.Repair_description)" />
                            </div>
                        </div>
                    </div>
                }
                @if(type == "storage"){
                     <div class="form-group ">
                        <div>
                        <label>@localizer["Cost_of_storage"]:</label>
                            <div>
                            <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.Cost_of_storage" />
                            <ValidationMessage For="@(() => expenses.Cost_of_storage)" />
                            </div>
                        </div>
                    </div>
                }
                @if (type != null)
                {
                    <div class="form-group ">
                        <div>
                            <label>@localizer["other"]:</label>
                            <div>
                            <InputNumber min="0"  class="form-control inputs" @bind-Value="@expenses.other" />
                            <ValidationMessage For="@(() => expenses.other)" />
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
   </div>
</EditForm>


@code {
    [Parameter] public Expenses? expenses { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public string? TitleText { get; set; }
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    List<Cargoes>? cargoes { get; set; }
    List<Tasks>? tasks { get; set; }
    List<Roads>? roads { get; set; }
    string? type;


    protected override async Task OnInitializedAsync()
    {
        cargoes = await client.GetFromJsonAsync<List<Cargoes>?>("api/cargoes/getcargoes");
        tasks = await client.GetFromJsonAsync<List<Tasks>?>("api/tasks/gettasks");
        roads = await client.GetFromJsonAsync<List<Roads>?>("api/roads/getroads");
        var expenseWithIds = await client.GetFromJsonAsync<List<Expenses>>("api/expenses/getexpenses");
        foreach (var expense in expenseWithIds)
        {
            if(expense.Type != null){
                var value = expense.Type.Value.ToString();
                roads?.RemoveAll(x => x.Id == expense.Type_id && value == "repair" &&
                    x.Id != expenses?.Type_id);

                tasks?.RemoveAll(x => x.Id == expense.Type_id && value == "task" &&
                    x.Id != expenses?.Type_id);

                cargoes?.RemoveAll(x => x.Id == expense.Type_id && value == "storage" &&
                    x.Id != expenses?.Type_id);
            }
        }
    }

    void onChangeGetType(ChangeEventArgs e)
    {
        type = e.Value.ToString();
    }
}