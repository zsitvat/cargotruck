@using Cargotruck.Shared.Resources
@using Microsoft.Extensions.Localization
@inherits LayoutComponentBase
@inject IStringLocalizer<Resource> localizer
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <NavLink href="Privacy" Match="NavLinkMatch.All">
                <span class="about" aria-hidden="true">@localizer["Privacy"]</span>
            </NavLink> 
            <AuthorizeView>
                <Authorized>      
                    <li class="username" @onclick="()=>expandSubMenu= !expandSubMenu">
                            @context.User.Identity.Name
                        @if (expandSubMenu)
                        {
                            <ul class="nav flex-column username-dropdown">
                                <li class="nav-item px-3">
                                    <NavLink  href="Profile">
                                        <span class="iconify" data-icon="akar-icons:person"></span>@localizer["Profile"]
                                    </NavLink>
                                </li>
                                <li class="nav-item px-3">
                                    <NavLink  @onclick="@LogoutClick">
                                        <span class="iconify" data-icon="ic:twotone-logout"></span>@localizer["Logout"]
                                    </NavLink>
                                </li>
                            </ul>
                        }
                    </li>
                </Authorized>
            </AuthorizeView>
            <CultureSelector />
        </div>

        <article class="content px-4 container" style="margin-right:3%;">
            @Body
        </article>
        <footer>
            <div class="bottom-row px-4">
            </div>
        </footer>
    </main>
</div>

@code{
    private bool expandSubMenu;

    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        if (!(await AuthenticationState).User.Identity.IsAuthenticated)
        {
            if (!navigationManager.Uri.ToString().Contains("login") && !navigationManager.Uri.ToString().Contains("Privacy") && !navigationManager.Uri.ToString().Contains("register"))
            {
                navigationManager.NavigateTo("/login");
            }
        }
    }
    async Task LogoutClick()
    {
        await authStateProvider.Logout();
        navigationManager.NavigateTo("/login");
    }
}