@using Cargotruck.Shared.Resources
@using Microsoft.Extensions.Localization
@inherits LayoutComponentBase
@inject IStringLocalizer<Resource> localizer

@if (darkmode)
{
    <style>
        html, body {
            background: #191c24;
        }

         .bottom-row, .bottom-row span {
            background-color: #243140 !important;
            color: rgba(160,180,200,.85) !important;
            border-color: #243140 !important;
        }
    </style>
}

<div class="page @(darkmode ? "darkmode" :"")" >
    <div class="sidebar" @onclick="()=>expandSubMenu= false">
        <NavMenu />
    </div>

    <main >
        <div class="top-row px-4">
            <NavLink href="/Privacy">
                <span class="about ms-5" aria-hidden="true">@localizer["Privacy"]</span>
            </NavLink>
           
            @if (currency_api_error != null && currency_api_error != "")
            {    
                <div class="d-inline-block">
                    <button class="no-button currency-api-error-icon error d-inline-block" @onclick="@(() => showError=!showError)">
                        <span class="icon iconify d-inline" style="color:darkred;" data-icon="material-symbols:error-circle-rounded-outline"></span>
                        <p class="error currency-api-error d-inline-block"> 
                            @if (showError)
                            {
                                @localizer[@currency_api_error]
                            }
                        </p>
                    </button>
                </div>
            }

            <label class="switch">
                <i style="@(darkmode ? "visibility: hidden;" : "")">
                    <span class="icon iconify switch-icon-light" data-icon="emojione-monotone:sun"></span>
                </i>
                <input type="checkbox" @onchange="@(async ()=>await darkMode())" checked="@darkmode">
                <span class="slider round"></span>
                <i style="@(darkmode ? "" : "visibility: hidden;")">
                    <span class="icon iconify switch-icon-dark" data-icon="bi:moon-fill"></span>
                </i>
            </label>
      
            <AuthorizeView>
                <Authorized>
                    <li class="username" @onclick="()=>expandSubMenu= !expandSubMenu">
                        <div class="top-nav-profile">
                            @foreach (var claim in context.User.Claims)
                            {
                                //<li>@claim.Type: @claim.Value</li>

                                @if (@claim.Type.Contains("img"))
                                {
                                    <img src="@claim.Value" class="small_profile_picture" alt="profile">
                                }
                           }
                      <span class="btn btn-sm">@context?.User?.Identity?.Name</span>
                    </div>
                        @if (expandSubMenu)
                        {
                            <ul class="nav flex-column username-dropdown">
                                <NavLink href="profile">
                                    <li class="nav-item px-3 ">
                                        <span class="iconify" data-icon="akar-icons:person"></span>@localizer["Profile"] 
                                     </li>
                                </NavLink>
                                <NavLink  @onclick="@LogoutClick">
                                    <li class="nav-item px-3">
                                         <span class="iconify" data-icon="ic:twotone-logout"></span>@localizer["Logout"]
                                    </li>
                                </NavLink>
                            </ul>
                        }
                    </li>
                </Authorized>
            </AuthorizeView>
            <CultureSelector />
        </div>

        <article class="content px-4 mt-3" @onclick="()=>expandSubMenu= false">
            @Body
        </article>
       
    </main>
</div>

<footer>
    <div class="bottom-row px-4">
        <NavLink href="/Privacy">
            <span class="footer-text" aria-hidden="true">2023 Cargotruck</span>
        </NavLink>
        <NavLink href="/Privacy">
            <span class="footer-text" aria-hidden="true">Privacy</span>
        </NavLink>
    </div>
</footer>

@code{
    bool showError = false;
    bool expandSubMenu;
    [Inject] static HttpClient? Client { get; set; }
    string? currency_api_error;
    [CascadingParameter]
    Task<AuthenticationState>? AuthenticationState { get; set; }
    static bool darkmode;

    protected override async Task OnInitializedAsync()
    {
        var settings = await client.GetFromJsonAsync<Settings[]>("api/settings/get");
        var DarkModeSetting = (settings?.Where(x => x.SettingName == "darkmode" && x.SettingValue == (AuthenticationState!).Result.User.Identity?.Name));
        darkmode = (DarkModeSetting?.Count() > 0 ? true : false);
        await base.OnInitializedAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!(await AuthenticationState!).User.Identity!.IsAuthenticated)
        {
            if (!navigationManager.Uri.ToString().Contains("login") && !navigationManager.Uri.ToString().Contains("Privacy"))
            {
                navigationManager.NavigateTo("/login");
            }
        }
        else
        {
            var getWaitTimeSetting = (await client.GetFromJsonAsync<Settings>("api/settings/getwaittime"));
            int waitTimeInSecond = getWaitTimeSetting != null ? Int32.Parse(getWaitTimeSetting?.SettingValue!) : 0;
            DateTime date = DateTime.Now;
            var dateWithWaitTime = CurrencyExchange.CurrencyApiDate?.AddSeconds(waitTimeInSecond);

            if (CurrencyExchange.Rates == null && dateWithWaitTime <= date)
            {
                try
                {
                    CurrencyExchange.Rates = await CurrencyExchange.GetRatesAsync(client);
                }
                catch (Exception ex)
                {

                    currency_api_error = $"Error - Type: {ex.GetType()}, Message: {ex.Message}";
                    if (ex.GetType().ToString() == "Microsoft.CSharp.RuntimeBinder.RuntimeBinderException")
                    {
                        currency_api_error = "currency_api_is_exceeded";
                    }
                }

                if (CurrencyExchange.Rates != null)
                {
                    CurrencyExchange.CurrencyApiDate = new(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, DateTime.Now.Hour, 0, 0);
                }
            }
        }
    }

    async Task LogoutClick()
    {
        PageHistoryState.ResetPageToHistory();
        await authStateProvider.Logout();
        navigationManager.NavigateTo("/login");
    }

    async Task darkMode()
    {
        if (darkmode)
        {
            var settings = await client.GetFromJsonAsync<Settings[]>("api/settings/get");
            var DarkModeSetting = (settings?.FirstOrDefault(x => x.SettingName == "darkmode" && x.SettingValue == (AuthenticationState!).Result.User.Identity?.Name));
            await client.DeleteAsync($"api/settings/delete/{DarkModeSetting?.Id}");
        }
        else
        {
            Settings setting = new();
            setting.SettingValue = (AuthenticationState!).Result.User.Identity?.Name;
            setting.SettingName = "darkmode";
            await client.PostAsJsonAsync("api/settings/post", setting);
        }
        await OnInitializedAsync();
    }
}