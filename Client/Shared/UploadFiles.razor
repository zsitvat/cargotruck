
@using System.Linq
@using System.Net.Http.Headers
@using Microsoft.Extensions.Logging
@inject HttpClient Http
@inject ILogger<UploadFiles> Logger


<InputFile id="inputfile" class="btn btn-light file-upload custom-file-input" OnChange="@OnInputFileChange" />
<p class="page-error">@error</p>

@code {
    [Parameter] public string? page { get; set; }
    [Parameter] public EventCallback StateChanged { get; set; }
    string? error;
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 1;


    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 3000;
        var upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    var fileContent = 
                        new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType = 
                        new MediaTypeHeaderValue(file.ContentType);

                    files.Add(new() { Name = file.Name });

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    Logger.LogInformation(
                        "{FileName} not uploaded (Err: 6): {Message}", 
                        file.Name, ex.Message);

                    uploadResults.Add(
                        new()
                        {
                            FileName = file.Name, 
                            ErrorCode = 6, 
                            Uploaded = false
                        });
                }
            }
        }

        if (upload)
        {
            HttpResponseMessage response = await Http.PostAsync($"api/filesave/{page}", content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<UploadResult>>();

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
                foreach (var file in uploadResults)
                {
                    var datasaved = await Http.GetAsync($"api/tasks/import?file={file.StoredFileName}&lang={CultureInfo.CurrentCulture.Name.ToString()}");
                    error = await datasaved.Content.ReadAsStringAsync();
                    if (datasaved.IsSuccessStatusCode) { navigationManager.NavigateTo("/Tasks", true); }
                    else {
                        await OnInitializedAsync();
                        await StateChanged.InvokeAsync();
                    }
                }
            }  
        }
    }

    private static bool FileUpload(IList<UploadResult> uploadResults, string? fileName, ILogger<UploadFiles> logger, out UploadResult result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            logger.LogInformation("{FileName} not uploaded (Err: 5)", fileName);
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }

    private class File
    {
        public string? Name { get; set; }
    }


}