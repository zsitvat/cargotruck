@inject HttpClient Http


<InputFile id="inputfile" class="btn btn-light file-upload custom-file-input" OnChange="@OnInputFileChange" />

@if(error != null && error != "" ){
    <div class="mb-3 input-group page-error">
        <div class="div-icon"><span class="icon iconify" style="margin:0;" data-icon="mdi:file-document-error-outline"></span></div>
        <p class="p-error">@error</p>
    </div>
}

@code {
    [Parameter] public string? page { get; set; }
    [Parameter] public EventCallback StateChanged { get; set; }
    string? error = "";
    private List<File> files = new();
    private List<UploadResult> uploadResults = new();
    private int maxAllowedFiles = 1;

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        long maxFileSize = 1024 * 5000;
        var upload = false;

        using var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    var fileContent = new StreamContent(file.OpenReadStream(maxFileSize));

                    fileContent.Headers.ContentType = new MediaTypeHeaderValue(file.ContentType);

                    files.Add(new() { Name = file.Name });

                    content.Add( content: fileContent, name: "\"files\"", fileName: file.Name);

                    upload = true;
                }
                catch (Exception ex)
                {
                    error = file.Name + " " + localizer["Not_uploaded"] + " " + ex.Message;
                }
            }
        }

        if (upload)
        {
            HttpResponseMessage response = await Http.PostAsync($"api/filesave/page?lang={CultureInfo.CurrentCulture.Name.ToString()}", content);

            var newUploadResults = await response.Content.ReadFromJsonAsync<IList<UploadResult>>();

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
                foreach (var file in uploadResults)
                {
                    var datasaved = await Http.PostAsJsonAsync($"api/{page}/import?&lang={CultureInfo.CurrentCulture.Name.ToString()}", file.StoredFileName);
                    error = await datasaved.Content.ReadAsStringAsync();
                    if (datasaved.IsSuccessStatusCode && error == "") 
                    { 
                        navigationManager.NavigateTo($"/{page}", true);
                    }
                    else {
                        await OnInitializedAsync();
                        await StateChanged.InvokeAsync();
                    }
                }
            }  
        }
    }

    private class File
    {
        public string? Name { get; set; }
    }
}