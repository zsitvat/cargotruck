@page "/Tasks"
@inject HttpClient client
@inject IJSRuntime js

<h3>Tasks</h3>
<small>Add as many developers as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="/Tasks/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>

@if (tasks == null)
{
    <text>Loading...</text>
}
else if (tasks.Length == 0)
{
    <text>No Records Found.</text>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
                <th>Email</th>
                <th>Experience (Years)</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (Tasks item in tasks)
            {
                <tr>
                    <td>@item.Id</td>
                    <td>@item.Partner</td>
                    <td>@item.Description</td>
                    <td>@item.Place_of_receipt</td>
                    <td>@item.Time_of_receipt</td>
                    <td>
                        <a class="btn btn-success" href="Tasks/edit/@item.Id">Edit</a>
                        <button class="btn btn-danger" @onclick="@(() => Delete(item.Id))">Delete</button>
                    </td>
                </tr>
            }

        </tbody>
    </table>
}
@code {
    Tasks[] tasks { get; set; }
    protected override async Task OnInitializedAsync()
    {
        tasks = await client.GetFromJsonAsync<Tasks[]>("api/tasks");
    }

    async Task Delete(int Id)
    {
        var t = tasks.First(x => x.Id == Id);
        if (await js.InvokeAsync<bool>("confirm", $"Do you want to delete {t.Partner}'s ({t.Id}) Record?"))
        {
            await client.DeleteAsync($"api/tasks/{Id}");
            await OnInitializedAsync();
        }
    }
}